// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Enables the provisioning and management of Redpanda Serverless clusters. A Serverless cluster requires a resource group.
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "eu-west-1";
 * const testServerlessCluster = new redpanda.ServerlessCluster("testServerlessCluster", {
 *     resourceGroupId: testResourceGroup.id,
 *     serverlessRegion: region,
 * });
 * const resourceGroupName = config.get("resourceGroupName") || "testgroup";
 * const clusterName = config.get("clusterName") || "testname";
 * ```
 *
 * ## Limitations
 *
 * Serverless on GCP is currently in beta. To unlock this feature for your account, contact your Redpanda account team.
 *
 * ### Example: Create a Serverless cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "eu-west-1";
 * const testServerlessCluster = new redpanda.ServerlessCluster("testServerlessCluster", {
 *     resourceGroupId: testResourceGroup.id,
 *     serverlessRegion: region,
 * });
 * const resourceGroupName = config.get("resourceGroupName") || "testgroup";
 * const clusterName = config.get("clusterName") || "testname";
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import redpanda:index/serverlessCluster:ServerlessCluster example serverlessClusterId
 * ```
 */
export class ServerlessCluster extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessClusterState, opts?: pulumi.CustomResourceOptions): ServerlessCluster {
        return new ServerlessCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redpanda:index/serverlessCluster:ServerlessCluster';

    /**
     * Returns true if the given object is an instance of ServerlessCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessCluster.__pulumiType;
    }

    /**
     * The URL of the dataplane API for the serverless cluster
     */
    public /*out*/ readonly clusterApiUrl!: pulumi.Output<string>;
    /**
     * Name of the serverless cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Resource Group in which to create the serverless cluster
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * Redpanda specific region of the serverless cluster
     */
    public readonly serverlessRegion!: pulumi.Output<string>;

    /**
     * Create a ServerlessCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessClusterArgs | ServerlessClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessClusterState | undefined;
            resourceInputs["clusterApiUrl"] = state ? state.clusterApiUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["serverlessRegion"] = state ? state.serverlessRegion : undefined;
        } else {
            const args = argsOrState as ServerlessClusterArgs | undefined;
            if ((!args || args.resourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupId'");
            }
            if ((!args || args.serverlessRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverlessRegion'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["serverlessRegion"] = args ? args.serverlessRegion : undefined;
            resourceInputs["clusterApiUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessCluster resources.
 */
export interface ServerlessClusterState {
    /**
     * The URL of the dataplane API for the serverless cluster
     */
    clusterApiUrl?: pulumi.Input<string>;
    /**
     * Name of the serverless cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Resource Group in which to create the serverless cluster
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Redpanda specific region of the serverless cluster
     */
    serverlessRegion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerlessCluster resource.
 */
export interface ServerlessClusterArgs {
    /**
     * Name of the serverless cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Resource Group in which to create the serverless cluster
     */
    resourceGroupId: pulumi.Input<string>;
    /**
     * Redpanda specific region of the serverless cluster
     */
    serverlessRegion: pulumi.Input<string>;
}
