// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Data source for a Redpanda Cloud cluster
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const example = redpanda.getCluster({
 *     id: "cluster_id",
 * });
 * ```
 *
 * ### Example Usage of a data source BYOC to manage users and ACLs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.get("clusterId") || "";
 * const testCluster = redpanda.getCluster({
 *     id: clusterId,
 * });
 * const topicConfig = config.getObject<any>("topicConfig") || {
 *     "cleanup.policy": "compact",
 *     "flush.ms": 100,
 *     "compression.type": "snappy",
 * };
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * const testTopic = new redpanda.Topic("testTopic", {
 *     partitionCount: partitionCount,
 *     replicationFactor: replicationFactor,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 *     allowDeletion: true,
 *     configuration: topicConfig,
 * });
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "ALTER",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const userName = config.get("userName") || "data-test-username";
 * const topicName = config.get("topicName") || "data-test-topic";
 * ```
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("redpanda:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
     */
    id: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * Whether cluster deletion is allowed.
     */
    readonly allowDeletion: boolean;
    /**
     * AWS PrivateLink configuration.
     */
    readonly awsPrivateLink: outputs.GetClusterAwsPrivateLink;
    /**
     * Azure Private Link configuration.
     */
    readonly azurePrivateLink: outputs.GetClusterAzurePrivateLink;
    /**
     * Cloud provider where resources are created.
     */
    readonly cloudProvider: string;
    /**
     * The URL of the cluster API.
     */
    readonly clusterApiUrl: string;
    /**
     * Cluster type. Type is immutable and can only be set on cluster creation.
     */
    readonly clusterType: string;
    /**
     * Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
     */
    readonly connectionType: string;
    /**
     * Timestamp when the cluster was created.
     */
    readonly createdAt: string;
    /**
     * Customer managed resources configuration for the cluster.
     */
    readonly customerManagedResources: outputs.GetClusterCustomerManagedResources;
    /**
     * If true, GCP global access is enabled.
     */
    readonly gcpGlobalAccessEnabled: boolean;
    /**
     * GCP Private Service Connect configuration.
     */
    readonly gcpPrivateServiceConnect: outputs.GetClusterGcpPrivateServiceConnect;
    /**
     * HTTP Proxy properties.
     */
    readonly httpProxy: outputs.GetClusterHttpProxy;
    /**
     * ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
     */
    readonly id: string;
    /**
     * Cluster's Kafka API properties.
     */
    readonly kafkaApi: outputs.GetClusterKafkaApi;
    /**
     * Kafka Connect configuration.
     */
    readonly kafkaConnect: outputs.GetClusterKafkaConnect;
    /**
     * Maintenance window configuration for the cluster.
     */
    readonly maintenanceWindowConfig: outputs.GetClusterMaintenanceWindowConfig;
    /**
     * Unique name of the cluster.
     */
    readonly name: string;
    /**
     * Network ID where cluster is placed.
     */
    readonly networkId: string;
    /**
     * Prometheus metrics endpoint properties.
     */
    readonly prometheus: outputs.GetClusterPrometheus;
    /**
     * IDs of clusters that can create read-only topics from this cluster.
     */
    readonly readReplicaClusterIds: string[];
    /**
     * Redpanda Console properties.
     */
    readonly redpandaConsole: outputs.GetClusterRedpandaConsole;
    /**
     * Current Redpanda version of the cluster.
     */
    readonly redpandaVersion: string;
    /**
     * Cloud provider region.
     */
    readonly region: string;
    /**
     * Resource group ID of the cluster.
     */
    readonly resourceGroupId: string;
    /**
     * Schema Registry properties.
     */
    readonly schemaRegistry: outputs.GetClusterSchemaRegistry;
    /**
     * Current state of the cluster.
     */
    readonly state: string;
    /**
     * Detailed state description when cluster is in a non-ready state.
     */
    readonly stateDescription: outputs.GetClusterStateDescription;
    /**
     * Tags placed on cloud resources.
     */
    readonly tags: {[key: string]: string};
    /**
     * Throughput tier of the cluster.
     */
    readonly throughputTier: string;
    /**
     * Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
     */
    readonly zones: string[];
}
/**
 * Data source for a Redpanda Cloud cluster
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const example = redpanda.getCluster({
 *     id: "cluster_id",
 * });
 * ```
 *
 * ### Example Usage of a data source BYOC to manage users and ACLs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.get("clusterId") || "";
 * const testCluster = redpanda.getCluster({
 *     id: clusterId,
 * });
 * const topicConfig = config.getObject<any>("topicConfig") || {
 *     "cleanup.policy": "compact",
 *     "flush.ms": 100,
 *     "compression.type": "snappy",
 * };
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * const testTopic = new redpanda.Topic("testTopic", {
 *     partitionCount: partitionCount,
 *     replicationFactor: replicationFactor,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 *     allowDeletion: true,
 *     configuration: topicConfig,
 * });
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "ALTER",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const userName = config.get("userName") || "data-test-username";
 * const topicName = config.get("topicName") || "data-test-topic";
 * ```
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("redpanda:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
     */
    id: pulumi.Input<string>;
}
