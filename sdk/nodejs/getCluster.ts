// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data source for a Redpanda Cloud cluster
 *
 * ## Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const example = redpanda.getCluster({
 *     id: "cluster_id",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Example Usage of a data source BYOC to manage users and ACLs
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.get("clusterId") || "";
 * const testCluster = redpanda.getCluster({
 *     id: clusterId,
 * });
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "ALTER",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const userName = config.get("userName") || "test-username";
 * const topicName = config.get("topicName") || "test-topic";
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("redpanda:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The id of the cluster
     */
    id: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * allows deletion of the cluster. defaults to true. Not recommended for production use
     */
    readonly allowDeletion: boolean;
    /**
     * Must be one of aws or gcp
     */
    readonly cloudProvider: string;
    /**
     * The URL of the cluster API
     */
    readonly clusterApiUrl: string;
    /**
     * Type of the cluster
     */
    readonly clusterType: string;
    /**
     * Connection type of the cluster
     */
    readonly connectionType: string;
    /**
     * The id of the cluster
     */
    readonly id: string;
    /**
     * Name of the cluster
     */
    readonly name: string;
    /**
     * The id of the namespace in which to create the cluster
     */
    readonly namespaceId: string;
    /**
     * The id of the network in which to create the cluster
     */
    readonly networkId: string;
    /**
     * Version of Redpanda to deploy
     */
    readonly redpandaVersion: string;
    /**
     * Cloud provider specific region of the cluster
     */
    readonly region: string;
    /**
     * Tags to apply to the cluster
     */
    readonly tags: {[key: string]: string};
    /**
     * Throughput tier of the cluster
     */
    readonly throughputTier: string;
    /**
     * Cloud provider specific zones of the cluster
     */
    readonly zones: string[];
}
/**
 * Data source for a Redpanda Cloud cluster
 *
 * ## Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const example = redpanda.getCluster({
 *     id: "cluster_id",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Example Usage of a data source BYOC to manage users and ACLs
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.get("clusterId") || "";
 * const testCluster = redpanda.getCluster({
 *     id: clusterId,
 * });
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "CLUSTER",
 *     resourceName: "kafka-cluster",
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "ALTER",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.then(testCluster => testCluster.clusterApiUrl),
 * });
 * const userName = config.get("userName") || "test-username";
 * const topicName = config.get("topicName") || "test-topic";
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * The id of the cluster
     */
    id: pulumi.Input<string>;
}
