// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("redpanda");

/**
 * Redpanda client token. You need either `accessToken`, or both `clientId` and `clientSecret` to use this provider. Can
 * also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
 */
export declare const accessToken: string | undefined;
Object.defineProperty(exports, "accessToken", {
    get() {
        return __config.get("accessToken");
    },
    enumerable: true,
});

/**
 * Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
 * ARM_CLIENT_ID
 */
export declare const azureClientId: string | undefined;
Object.defineProperty(exports, "azureClientId", {
    get() {
        return __config.get("azureClientId");
    },
    enumerable: true,
});

/**
 * Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
 * or ARM_CLIENT_SECRET
 */
export declare const azureClientSecret: string | undefined;
Object.defineProperty(exports, "azureClientSecret", {
    get() {
        return __config.get("azureClientSecret");
    },
    enumerable: true,
});

/**
 * The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
 * on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
 */
export declare const azureSubscriptionId: string | undefined;
Object.defineProperty(exports, "azureSubscriptionId", {
    get() {
        return __config.get("azureSubscriptionId");
    },
    enumerable: true,
});

/**
 * Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
 * ARM_TENANT_ID
 */
export declare const azureTenantId: string | undefined;
Object.defineProperty(exports, "azureTenantId", {
    get() {
        return __config.get("azureTenantId");
    },
    enumerable: true,
});

/**
 * The ID for the client. You need either `clientId` AND `clientSecret`, or `accessToken`, to use this provider. Can also
 * be set with the `REDPANDA_CLIENT_ID` environment variable.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * Redpanda client secret. You need either `clientId` AND `clientSecret`, or `accessToken`, to use this provider. Can also
 * be set with the `REDPANDA_CLIENT_SECRET` environment variable.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

/**
 * The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
 * will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
 * ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
 */
export declare const gcpProjectId: string | undefined;
Object.defineProperty(exports, "gcpProjectId", {
    get() {
        return __config.get("gcpProjectId");
    },
    enumerable: true,
});

/**
 * Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
 */
export declare const googleCredentials: string | undefined;
Object.defineProperty(exports, "googleCredentials", {
    get() {
        return __config.get("googleCredentials");
    },
    enumerable: true,
});

/**
 * Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
 * intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
 */
export declare const googleCredentialsBase64: string | undefined;
Object.defineProperty(exports, "googleCredentialsBase64", {
    get() {
        return __config.get("googleCredentialsBase64");
    },
    enumerable: true,
});

