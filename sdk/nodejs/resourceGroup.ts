// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A Redpanda Cloud resource group
 *
 * Creates a Resource Group in the Redpanda Cloud.
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "us-east-2";
 * const cloudProvider = config.get("cloudProvider") || "aws";
 * const testNetwork = new redpanda.Network("testNetwork", {
 *     resourceGroupId: testResourceGroup.id,
 *     cloudProvider: cloudProvider,
 *     region: region,
 *     clusterType: "dedicated",
 *     cidrBlock: "10.0.0.0/20",
 * });
 * const zones = config.getObject<any>("zones") || [
 *     "use2-az1",
 *     "use2-az2",
 *     "use2-az3",
 * ];
 * const throughputTier = config.get("throughputTier") || "tier-1-aws-v2-arm";
 * const testCluster = new redpanda.Cluster("testCluster", {
 *     resourceGroupId: testResourceGroup.id,
 *     networkId: testNetwork.id,
 *     cloudProvider: cloudProvider,
 *     region: region,
 *     clusterType: "dedicated",
 *     connectionType: "public",
 *     throughputTier: throughputTier,
 *     zones: zones,
 *     allowDeletion: true,
 *     tags: {
 *         key: "value",
 *     },
 * });
 * // aws_private_link = {
 * //   enabled         = true
 * //   connect_console = true
 * //   allowed_principals = ["arn:aws:iam::123456789024:root"]
 * // }
 * const resourceGroupName = config.get("resourceGroupName") || "testname";
 * const networkName = config.get("networkName") || "testname";
 * const clusterName = config.get("clusterName") || "testname";
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.clusterApiUrl,
 * });
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * const testTopic = new redpanda.Topic("testTopic", {
 *     partitionCount: partitionCount,
 *     replicationFactor: replicationFactor,
 *     clusterApiUrl: testCluster.clusterApiUrl,
 *     allowDeletion: true,
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "TOPIC",
 *     resourceName: testTopic.name,
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "READ",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.clusterApiUrl,
 * });
 * const userName = config.get("userName") || "test-username";
 * const topicName = config.get("topicName") || "test-topic";
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import redpanda:index/resourceGroup:ResourceGroup example resourcegroupId
 * ```
 */
export class ResourceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupState, opts?: pulumi.CustomResourceOptions): ResourceGroup {
        return new ResourceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redpanda:index/resourceGroup:ResourceGroup';

    /**
     * Returns true if the given object is an instance of ResourceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroup.__pulumiType;
    }

    /**
     * Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ResourceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupArgs | ResourceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ResourceGroupArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroup resources.
 */
export interface ResourceGroupState {
    /**
     * Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceGroup resource.
 */
export interface ResourceGroupArgs {
    /**
     * Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed
     */
    name?: pulumi.Input<string>;
}
