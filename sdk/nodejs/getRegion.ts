// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data source for a Redpanda Cloud region
 */
export function getRegion(args: GetRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("redpanda:index/getRegion:getRegion", {
        "cloudProvider": args.cloudProvider,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionArgs {
    /**
     * Cloud provider where the region exists
     */
    cloudProvider: string;
    /**
     * Name of the region
     */
    name: string;
}

/**
 * A collection of values returned by getRegion.
 */
export interface GetRegionResult {
    /**
     * Cloud provider where the region exists
     */
    readonly cloudProvider: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name of the region
     */
    readonly name: string;
    /**
     * Zones available in the region
     */
    readonly zones: string[];
}
/**
 * Data source for a Redpanda Cloud region
 */
export function getRegionOutput(args: GetRegionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRegionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("redpanda:index/getRegion:getRegion", {
        "cloudProvider": args.cloudProvider,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionOutputArgs {
    /**
     * Cloud provider where the region exists
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Name of the region
     */
    name: pulumi.Input<string>;
}
