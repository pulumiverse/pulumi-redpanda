// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Topic represents a Kafka topic configuration
 *
 * Creates a topic in a Redpanda Cluster
 *
 * ## Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const testNamespace = new redpanda.Namespace("testNamespace", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "us-east-1";
 * const cloudProvider = config.get("cloudProvider") || "aws";
 * const testNetwork = new redpanda.Network("testNetwork", {
 *     namespaceId: testNamespace.id,
 *     cloudProvider: cloudProvider,
 *     region: region,
 *     clusterType: "dedicated",
 *     cidrBlock: "10.0.0.0/20",
 * });
 * const zones = config.getObject("zones") || [
 *     "use1-az2",
 *     "use1-az4",
 *     "use1-az6",
 * ];
 * const throughputTier = config.get("throughputTier") || "tier-1-aws-v2-arm";
 * const testCluster = new redpanda.Cluster("testCluster", {
 *     namespaceId: testNamespace.id,
 *     networkId: testNetwork.id,
 *     cloudProvider: cloudProvider,
 *     region: region,
 *     clusterType: "dedicated",
 *     connectionType: "public",
 *     throughputTier: throughputTier,
 *     zones: zones,
 *     allowDeletion: true,
 *     tags: {
 *         key: "value",
 *     },
 * });
 * const userPw = config.get("userPw") || "password";
 * const mechanism = config.get("mechanism") || "scram-sha-256";
 * const testUser = new redpanda.User("testUser", {
 *     password: userPw,
 *     mechanism: mechanism,
 *     clusterApiUrl: testCluster.clusterApiUrl,
 * });
 * const partitionCount = config.getNumber("partitionCount") || 3;
 * const replicationFactor = config.getNumber("replicationFactor") || 3;
 * const testTopic = new redpanda.Topic("testTopic", {
 *     partitionCount: partitionCount,
 *     replicationFactor: replicationFactor,
 *     clusterApiUrl: testCluster.clusterApiUrl,
 *     allowDeletion: true,
 * });
 * const testAcl = new redpanda.Acl("testAcl", {
 *     resourceType: "TOPIC",
 *     resourceName: testTopic.name,
 *     resourcePatternType: "LITERAL",
 *     principal: pulumi.interpolate`User:${testUser.name}`,
 *     host: "*",
 *     operation: "READ",
 *     permissionType: "ALLOW",
 *     clusterApiUrl: testCluster.clusterApiUrl,
 * });
 * const namespaceName = config.get("namespaceName") || "testname";
 * const networkName = config.get("networkName") || "testname";
 * const clusterName = config.get("clusterName") || "testname";
 * const userName = config.get("userName") || "test-username";
 * const topicName = config.get("topicName") || "test-topic";
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Limitations
 *
 * We are not currently able to support topic creation in self hosted clusters. This is an area of active development so expect that to change soon.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import redpanda:index/topic:Topic example topicName,clusterId
 * ```
 *
 * Where clusterId is the ID of the cluster in Redpanda Cloud
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redpanda:index/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * Indicates whether the topic can be deleted.
     */
    public readonly allowDeletion!: pulumi.Output<boolean | undefined>;
    /**
     * The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
     */
    public readonly clusterApiUrl!: pulumi.Output<string>;
    /**
     * A map of string key/value pairs of topic configurations.
     */
    public readonly configuration!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the topic.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of partitions for the topic. This determines how the data is distributed across brokers.
     */
    public readonly partitionCount!: pulumi.Output<number>;
    /**
     * The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
     */
    public readonly replicationFactor!: pulumi.Output<number>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["allowDeletion"] = state ? state.allowDeletion : undefined;
            resourceInputs["clusterApiUrl"] = state ? state.clusterApiUrl : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.clusterApiUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterApiUrl'");
            }
            resourceInputs["allowDeletion"] = args ? args.allowDeletion : undefined;
            resourceInputs["clusterApiUrl"] = args ? args.clusterApiUrl : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * Indicates whether the topic can be deleted.
     */
    allowDeletion?: pulumi.Input<boolean>;
    /**
     * The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
     */
    clusterApiUrl?: pulumi.Input<string>;
    /**
     * A map of string key/value pairs of topic configurations.
     */
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the topic.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of partitions for the topic. This determines how the data is distributed across brokers.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
     */
    replicationFactor?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * Indicates whether the topic can be deleted.
     */
    allowDeletion?: pulumi.Input<boolean>;
    /**
     * The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
     */
    clusterApiUrl: pulumi.Input<string>;
    /**
     * A map of string key/value pairs of topic configurations.
     */
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the topic.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of partitions for the topic. This determines how the data is distributed across brokers.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
     */
    replicationFactor?: pulumi.Input<number>;
}
