// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data source for a Redpanda Cloud network
 *
 * ## Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const example = redpanda.getNetwork({
 *     id: "network_id",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNetwork(args: GetNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("redpanda:index/getNetwork:getNetwork", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkArgs {
    /**
     * UUID of the network
     */
    id: string;
}

/**
 * A collection of values returned by getNetwork.
 */
export interface GetNetworkResult {
    /**
     * The cidrBlock to create the network in
     */
    readonly cidrBlock: string;
    /**
     * The cloud provider to create the network in. Can also be set at the provider level
     */
    readonly cloudProvider: string;
    /**
     * The type of cluster this network is associated with, can be one of dedicated or cloud
     */
    readonly clusterType: string;
    /**
     * UUID of the network
     */
    readonly id: string;
    /**
     * Name of the network
     */
    readonly name: string;
    /**
     * The id of the namespace in which to create the network
     */
    readonly namespaceId: string;
    /**
     * The region to create the network in. Can also be set at the provider level
     */
    readonly region: string;
}
/**
 * Data source for a Redpanda Cloud network
 *
 * ## Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumi/redpanda";
 *
 * const example = redpanda.getNetwork({
 *     id: "network_id",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNetworkOutput(args: GetNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkResult> {
    return pulumi.output(args).apply((a: any) => getNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkOutputArgs {
    /**
     * UUID of the network
     */
    id: pulumi.Input<string>;
}
