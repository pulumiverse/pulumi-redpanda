// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetServerlessClusterArgs, GetServerlessClusterResult, GetServerlessClusterOutputArgs } from "./getServerlessCluster";
export const getServerlessCluster: typeof import("./getServerlessCluster").getServerlessCluster = null as any;
export const getServerlessClusterOutput: typeof import("./getServerlessCluster").getServerlessClusterOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessCluster","getServerlessClusterOutput"], () => require("./getServerlessCluster"));

export { GetServerlessRegionsArgs, GetServerlessRegionsResult, GetServerlessRegionsOutputArgs } from "./getServerlessRegions";
export const getServerlessRegions: typeof import("./getServerlessRegions").getServerlessRegions = null as any;
export const getServerlessRegionsOutput: typeof import("./getServerlessRegions").getServerlessRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessRegions","getServerlessRegionsOutput"], () => require("./getServerlessRegions"));

export { GetThroughputTiersArgs, GetThroughputTiersResult, GetThroughputTiersOutputArgs } from "./getThroughputTiers";
export const getThroughputTiers: typeof import("./getThroughputTiers").getThroughputTiers = null as any;
export const getThroughputTiersOutput: typeof import("./getThroughputTiers").getThroughputTiersOutput = null as any;
utilities.lazyLoad(exports, ["getThroughputTiers","getThroughputTiersOutput"], () => require("./getThroughputTiers"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export * from "./provider";
import { Provider } from "./provider";

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { ServerlessClusterArgs, ServerlessClusterState } from "./serverlessCluster";
export type ServerlessCluster = import("./serverlessCluster").ServerlessCluster;
export const ServerlessCluster: typeof import("./serverlessCluster").ServerlessCluster = null as any;
utilities.lazyLoad(exports, ["ServerlessCluster"], () => require("./serverlessCluster"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "redpanda:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "redpanda:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "redpanda:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "redpanda:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "redpanda:index/serverlessCluster:ServerlessCluster":
                return new ServerlessCluster(name, <any>undefined, { urn })
            case "redpanda:index/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            case "redpanda:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("redpanda", "index/acl", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/cluster", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/network", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/serverlessCluster", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/topic", _module)
pulumi.runtime.registerResourceModule("redpanda", "index/user", _module)
pulumi.runtime.registerResourcePackage("redpanda", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:redpanda") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
