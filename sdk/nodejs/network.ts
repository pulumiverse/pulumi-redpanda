// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a network in the Redpanda Cloud.
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "us-east-1";
 * const cloudProvider = config.get("cloudProvider") || "aws";
 * const testNetwork = new redpanda.Network("testNetwork", {
 *     resourceGroupId: testResourceGroup.id,
 *     cloudProvider: cloudProvider,
 *     region: region,
 *     clusterType: "dedicated",
 *     cidrBlock: "10.0.0.0/20",
 * });
 * const resourceGroupName = config.get("resourceGroupName") || "testname";
 * const networkName = config.get("networkName") || "testname";
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import redpanda:index/network:Network example networkId
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redpanda:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * The cidrBlock to create the network in
     */
    public readonly cidrBlock!: pulumi.Output<string | undefined>;
    /**
     * The cloud provider to create the network in.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The type of cluster this network is associated with, can be one of dedicated or cloud
     */
    public readonly clusterType!: pulumi.Output<string>;
    public readonly customerManagedResources!: pulumi.Output<outputs.NetworkCustomerManagedResources | undefined>;
    /**
     * Name of the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region to create the network in.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The ID of the resource group in which to create the network
     */
    public readonly resourceGroupId!: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["customerManagedResources"] = state ? state.customerManagedResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.resourceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupId'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["customerManagedResources"] = args ? args.customerManagedResources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * The cidrBlock to create the network in
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The cloud provider to create the network in.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The type of cluster this network is associated with, can be one of dedicated or cloud
     */
    clusterType?: pulumi.Input<string>;
    customerManagedResources?: pulumi.Input<inputs.NetworkCustomerManagedResources>;
    /**
     * Name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * The region to create the network in.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the resource group in which to create the network
     */
    resourceGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * The cidrBlock to create the network in
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The cloud provider to create the network in.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * The type of cluster this network is associated with, can be one of dedicated or cloud
     */
    clusterType: pulumi.Input<string>;
    customerManagedResources?: pulumi.Input<inputs.NetworkCustomerManagedResources>;
    /**
     * Name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * The region to create the network in.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the resource group in which to create the network
     */
    resourceGroupId: pulumi.Input<string>;
}
