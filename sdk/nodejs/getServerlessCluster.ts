// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data source for a Redpanda Cloud serverless cluster
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const example = redpanda.getServerlessCluster({
 *     id: "serverless_cluster_id",
 * });
 * ```
 *
 * ### Example Usage to create a serverless cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "eu-west-1";
 * const testServerlessCluster = new redpanda.ServerlessCluster("testServerlessCluster", {
 *     resourceGroupId: testResourceGroup.id,
 *     serverlessRegion: region,
 * });
 * const resourceGroupName = config.get("resourceGroupName") || "testgroup";
 * const clusterName = config.get("clusterName") || "testname";
 * ```
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud serverless clusters.
 */
export function getServerlessCluster(args: GetServerlessClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetServerlessClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("redpanda:index/getServerlessCluster:getServerlessCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerlessCluster.
 */
export interface GetServerlessClusterArgs {
    /**
     * The ID of the serverless cluster
     */
    id: string;
}

/**
 * A collection of values returned by getServerlessCluster.
 */
export interface GetServerlessClusterResult {
    /**
     * The URL of the cluster API
     */
    readonly clusterApiUrl: string;
    /**
     * The ID of the serverless cluster
     */
    readonly id: string;
    /**
     * Name of the serverless cluster
     */
    readonly name: string;
    /**
     * The ID of the resource group in which to create the serverless cluster
     */
    readonly resourceGroupId: string;
    /**
     * Redpanda specific region for the serverless cluster
     */
    readonly serverlessRegion: string;
}
/**
 * Data source for a Redpanda Cloud serverless cluster
 *
 * ## Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const example = redpanda.getServerlessCluster({
 *     id: "serverless_cluster_id",
 * });
 * ```
 *
 * ### Example Usage to create a serverless cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as redpanda from "@pulumiverse/redpanda";
 *
 * const testResourceGroup = new redpanda.ResourceGroup("testResourceGroup", {});
 * const config = new pulumi.Config();
 * const region = config.get("region") || "eu-west-1";
 * const testServerlessCluster = new redpanda.ServerlessCluster("testServerlessCluster", {
 *     resourceGroupId: testResourceGroup.id,
 *     serverlessRegion: region,
 * });
 * const resourceGroupName = config.get("resourceGroupName") || "testgroup";
 * const clusterName = config.get("clusterName") || "testname";
 * ```
 *
 * ## Limitations
 *
 * Can only be used with Redpanda Cloud serverless clusters.
 */
export function getServerlessClusterOutput(args: GetServerlessClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServerlessClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("redpanda:index/getServerlessCluster:getServerlessCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerlessCluster.
 */
export interface GetServerlessClusterOutputArgs {
    /**
     * The ID of the serverless cluster
     */
    id: pulumi.Input<string>;
}
