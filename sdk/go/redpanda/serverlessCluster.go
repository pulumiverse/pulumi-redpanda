// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Enables the provisioning and management of Redpanda Serverless clusters. A Serverless cluster requires a resource group.
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := redpanda.NewResourceGroup(ctx, "testResourceGroup", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "eu-west-1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			_, err = redpanda.NewServerlessCluster(ctx, "testServerlessCluster", &redpanda.ServerlessClusterArgs{
//				ResourceGroupId:  testResourceGroup.ID(),
//				ServerlessRegion: pulumi.String(region),
//			})
//			if err != nil {
//				return err
//			}
//			resourceGroupName := "testgroup"
//			if param := cfg.Get("resourceGroupName"); param != "" {
//				resourceGroupName = param
//			}
//			clusterName := "testname"
//			if param := cfg.Get("clusterName"); param != "" {
//				clusterName = param
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Limitations
//
// Serverless on GCP is currently in beta. To unlock this feature for your account, contact your Redpanda account team.
//
// ### Example: Create a Serverless cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := redpanda.NewResourceGroup(ctx, "testResourceGroup", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "eu-west-1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			_, err = redpanda.NewServerlessCluster(ctx, "testServerlessCluster", &redpanda.ServerlessClusterArgs{
//				ResourceGroupId:  testResourceGroup.ID(),
//				ServerlessRegion: pulumi.String(region),
//			})
//			if err != nil {
//				return err
//			}
//			resourceGroupName := "testgroup"
//			if param := cfg.Get("resourceGroupName"); param != "" {
//				resourceGroupName = param
//			}
//			clusterName := "testname"
//			if param := cfg.Get("clusterName"); param != "" {
//				clusterName = param
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import redpanda:index/serverlessCluster:ServerlessCluster example serverlessClusterId
// ```
type ServerlessCluster struct {
	pulumi.CustomResourceState

	// The URL of the dataplane API for the serverless cluster
	ClusterApiUrl pulumi.StringOutput `pulumi:"clusterApiUrl"`
	// Name of the serverless cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Resource Group in which to create the serverless cluster
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// Redpanda specific region of the serverless cluster
	ServerlessRegion pulumi.StringOutput `pulumi:"serverlessRegion"`
}

// NewServerlessCluster registers a new resource with the given unique name, arguments, and options.
func NewServerlessCluster(ctx *pulumi.Context,
	name string, args *ServerlessClusterArgs, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupId'")
	}
	if args.ServerlessRegion == nil {
		return nil, errors.New("invalid value for required argument 'ServerlessRegion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessCluster
	err := ctx.RegisterResource("redpanda:index/serverlessCluster:ServerlessCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessCluster gets an existing ServerlessCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessClusterState, opts ...pulumi.ResourceOption) (*ServerlessCluster, error) {
	var resource ServerlessCluster
	err := ctx.ReadResource("redpanda:index/serverlessCluster:ServerlessCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessCluster resources.
type serverlessClusterState struct {
	// The URL of the dataplane API for the serverless cluster
	ClusterApiUrl *string `pulumi:"clusterApiUrl"`
	// Name of the serverless cluster
	Name *string `pulumi:"name"`
	// The ID of the Resource Group in which to create the serverless cluster
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// Redpanda specific region of the serverless cluster
	ServerlessRegion *string `pulumi:"serverlessRegion"`
}

type ServerlessClusterState struct {
	// The URL of the dataplane API for the serverless cluster
	ClusterApiUrl pulumi.StringPtrInput
	// Name of the serverless cluster
	Name pulumi.StringPtrInput
	// The ID of the Resource Group in which to create the serverless cluster
	ResourceGroupId pulumi.StringPtrInput
	// Redpanda specific region of the serverless cluster
	ServerlessRegion pulumi.StringPtrInput
}

func (ServerlessClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterState)(nil)).Elem()
}

type serverlessClusterArgs struct {
	// Name of the serverless cluster
	Name *string `pulumi:"name"`
	// The ID of the Resource Group in which to create the serverless cluster
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// Redpanda specific region of the serverless cluster
	ServerlessRegion string `pulumi:"serverlessRegion"`
}

// The set of arguments for constructing a ServerlessCluster resource.
type ServerlessClusterArgs struct {
	// Name of the serverless cluster
	Name pulumi.StringPtrInput
	// The ID of the Resource Group in which to create the serverless cluster
	ResourceGroupId pulumi.StringInput
	// Redpanda specific region of the serverless cluster
	ServerlessRegion pulumi.StringInput
}

func (ServerlessClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessClusterArgs)(nil)).Elem()
}

type ServerlessClusterInput interface {
	pulumi.Input

	ToServerlessClusterOutput() ServerlessClusterOutput
	ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput
}

func (*ServerlessCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCluster)(nil)).Elem()
}

func (i *ServerlessCluster) ToServerlessClusterOutput() ServerlessClusterOutput {
	return i.ToServerlessClusterOutputWithContext(context.Background())
}

func (i *ServerlessCluster) ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterOutput)
}

// ServerlessClusterArrayInput is an input type that accepts ServerlessClusterArray and ServerlessClusterArrayOutput values.
// You can construct a concrete instance of `ServerlessClusterArrayInput` via:
//
//	ServerlessClusterArray{ ServerlessClusterArgs{...} }
type ServerlessClusterArrayInput interface {
	pulumi.Input

	ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput
	ToServerlessClusterArrayOutputWithContext(context.Context) ServerlessClusterArrayOutput
}

type ServerlessClusterArray []ServerlessClusterInput

func (ServerlessClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessCluster)(nil)).Elem()
}

func (i ServerlessClusterArray) ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput {
	return i.ToServerlessClusterArrayOutputWithContext(context.Background())
}

func (i ServerlessClusterArray) ToServerlessClusterArrayOutputWithContext(ctx context.Context) ServerlessClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterArrayOutput)
}

// ServerlessClusterMapInput is an input type that accepts ServerlessClusterMap and ServerlessClusterMapOutput values.
// You can construct a concrete instance of `ServerlessClusterMapInput` via:
//
//	ServerlessClusterMap{ "key": ServerlessClusterArgs{...} }
type ServerlessClusterMapInput interface {
	pulumi.Input

	ToServerlessClusterMapOutput() ServerlessClusterMapOutput
	ToServerlessClusterMapOutputWithContext(context.Context) ServerlessClusterMapOutput
}

type ServerlessClusterMap map[string]ServerlessClusterInput

func (ServerlessClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessCluster)(nil)).Elem()
}

func (i ServerlessClusterMap) ToServerlessClusterMapOutput() ServerlessClusterMapOutput {
	return i.ToServerlessClusterMapOutputWithContext(context.Background())
}

func (i ServerlessClusterMap) ToServerlessClusterMapOutputWithContext(ctx context.Context) ServerlessClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessClusterMapOutput)
}

type ServerlessClusterOutput struct{ *pulumi.OutputState }

func (ServerlessClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterOutput) ToServerlessClusterOutput() ServerlessClusterOutput {
	return o
}

func (o ServerlessClusterOutput) ToServerlessClusterOutputWithContext(ctx context.Context) ServerlessClusterOutput {
	return o
}

// The URL of the dataplane API for the serverless cluster
func (o ServerlessClusterOutput) ClusterApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.ClusterApiUrl }).(pulumi.StringOutput)
}

// Name of the serverless cluster
func (o ServerlessClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Resource Group in which to create the serverless cluster
func (o ServerlessClusterOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Redpanda specific region of the serverless cluster
func (o ServerlessClusterOutput) ServerlessRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCluster) pulumi.StringOutput { return v.ServerlessRegion }).(pulumi.StringOutput)
}

type ServerlessClusterArrayOutput struct{ *pulumi.OutputState }

func (ServerlessClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterArrayOutput) ToServerlessClusterArrayOutput() ServerlessClusterArrayOutput {
	return o
}

func (o ServerlessClusterArrayOutput) ToServerlessClusterArrayOutputWithContext(ctx context.Context) ServerlessClusterArrayOutput {
	return o
}

func (o ServerlessClusterArrayOutput) Index(i pulumi.IntInput) ServerlessClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerlessCluster {
		return vs[0].([]*ServerlessCluster)[vs[1].(int)]
	}).(ServerlessClusterOutput)
}

type ServerlessClusterMapOutput struct{ *pulumi.OutputState }

func (ServerlessClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerlessCluster)(nil)).Elem()
}

func (o ServerlessClusterMapOutput) ToServerlessClusterMapOutput() ServerlessClusterMapOutput {
	return o
}

func (o ServerlessClusterMapOutput) ToServerlessClusterMapOutputWithContext(ctx context.Context) ServerlessClusterMapOutput {
	return o
}

func (o ServerlessClusterMapOutput) MapIndex(k pulumi.StringInput) ServerlessClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerlessCluster {
		return vs[0].(map[string]*ServerlessCluster)[vs[1].(string)]
	}).(ServerlessClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterInput)(nil)).Elem(), &ServerlessCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterArrayInput)(nil)).Elem(), ServerlessClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessClusterMapInput)(nil)).Elem(), ServerlessClusterMap{})
	pulumi.RegisterOutputType(ServerlessClusterOutput{})
	pulumi.RegisterOutputType(ServerlessClusterArrayOutput{})
	pulumi.RegisterOutputType(ServerlessClusterMapOutput{})
}
