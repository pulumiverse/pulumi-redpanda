// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a Redpanda Cloud region
func GetRegion(ctx *pulumi.Context, args *GetRegionArgs, opts ...pulumi.InvokeOption) (*GetRegionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRegionResult
	err := ctx.Invoke("redpanda:index/getRegion:getRegion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegion.
type GetRegionArgs struct {
	// Cloud provider where the region exists
	CloudProvider string `pulumi:"cloudProvider"`
	// Name of the region
	Name string `pulumi:"name"`
}

// A collection of values returned by getRegion.
type GetRegionResult struct {
	// Cloud provider where the region exists
	CloudProvider string `pulumi:"cloudProvider"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the region
	Name string `pulumi:"name"`
	// Zones available in the region
	Zones []string `pulumi:"zones"`
}

func GetRegionOutput(ctx *pulumi.Context, args GetRegionOutputArgs, opts ...pulumi.InvokeOption) GetRegionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRegionResultOutput, error) {
			args := v.(GetRegionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("redpanda:index/getRegion:getRegion", args, GetRegionResultOutput{}, options).(GetRegionResultOutput), nil
		}).(GetRegionResultOutput)
}

// A collection of arguments for invoking getRegion.
type GetRegionOutputArgs struct {
	// Cloud provider where the region exists
	CloudProvider pulumi.StringInput `pulumi:"cloudProvider"`
	// Name of the region
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRegionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionArgs)(nil)).Elem()
}

// A collection of values returned by getRegion.
type GetRegionResultOutput struct{ *pulumi.OutputState }

func (GetRegionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionResult)(nil)).Elem()
}

func (o GetRegionResultOutput) ToGetRegionResultOutput() GetRegionResultOutput {
	return o
}

func (o GetRegionResultOutput) ToGetRegionResultOutputWithContext(ctx context.Context) GetRegionResultOutput {
	return o
}

// Cloud provider where the region exists
func (o GetRegionResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the region
func (o GetRegionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Zones available in the region
func (o GetRegionResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegionResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionResultOutput{})
}
