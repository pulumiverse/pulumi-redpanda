// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a list of Redpanda Cloud throughput tiers
func GetThroughputTiers(ctx *pulumi.Context, args *GetThroughputTiersArgs, opts ...pulumi.InvokeOption) (*GetThroughputTiersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetThroughputTiersResult
	err := ctx.Invoke("redpanda:index/getThroughputTiers:getThroughputTiers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getThroughputTiers.
type GetThroughputTiersArgs struct {
	// Cloud provider where the Throughput Tiers are available
	CloudProvider *string `pulumi:"cloudProvider"`
}

// A collection of values returned by getThroughputTiers.
type GetThroughputTiersResult struct {
	// Cloud provider where the Throughput Tiers are available
	CloudProvider *string `pulumi:"cloudProvider"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Throughput Tiers
	ThroughputTiers []GetThroughputTiersThroughputTier `pulumi:"throughputTiers"`
}

func GetThroughputTiersOutput(ctx *pulumi.Context, args GetThroughputTiersOutputArgs, opts ...pulumi.InvokeOption) GetThroughputTiersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetThroughputTiersResultOutput, error) {
			args := v.(GetThroughputTiersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("redpanda:index/getThroughputTiers:getThroughputTiers", args, GetThroughputTiersResultOutput{}, options).(GetThroughputTiersResultOutput), nil
		}).(GetThroughputTiersResultOutput)
}

// A collection of arguments for invoking getThroughputTiers.
type GetThroughputTiersOutputArgs struct {
	// Cloud provider where the Throughput Tiers are available
	CloudProvider pulumi.StringPtrInput `pulumi:"cloudProvider"`
}

func (GetThroughputTiersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThroughputTiersArgs)(nil)).Elem()
}

// A collection of values returned by getThroughputTiers.
type GetThroughputTiersResultOutput struct{ *pulumi.OutputState }

func (GetThroughputTiersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetThroughputTiersResult)(nil)).Elem()
}

func (o GetThroughputTiersResultOutput) ToGetThroughputTiersResultOutput() GetThroughputTiersResultOutput {
	return o
}

func (o GetThroughputTiersResultOutput) ToGetThroughputTiersResultOutputWithContext(ctx context.Context) GetThroughputTiersResultOutput {
	return o
}

// Cloud provider where the Throughput Tiers are available
func (o GetThroughputTiersResultOutput) CloudProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetThroughputTiersResult) *string { return v.CloudProvider }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetThroughputTiersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetThroughputTiersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Throughput Tiers
func (o GetThroughputTiersResultOutput) ThroughputTiers() GetThroughputTiersThroughputTierArrayOutput {
	return o.ApplyT(func(v GetThroughputTiersResult) []GetThroughputTiersThroughputTier { return v.ThroughputTiers }).(GetThroughputTiersThroughputTierArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetThroughputTiersResultOutput{})
}
