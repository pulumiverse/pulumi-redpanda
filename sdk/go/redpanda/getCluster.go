// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a Redpanda Cloud cluster
//
// ## Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redpanda.LookupCluster(ctx, &redpanda.LookupClusterArgs{
//				Id: "cluster_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Example Usage of a data source BYOC to manage users and ACLs
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := ""
//			if param := cfg.Get("clusterId"); param != "" {
//				clusterId = param
//			}
//			testCluster, err := redpanda.LookupCluster(ctx, &redpanda.LookupClusterArgs{
//				Id: clusterId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			userPw := "password"
//			if param := cfg.Get("userPw"); param != "" {
//				userPw = param
//			}
//			mechanism := "scram-sha-256"
//			if param := cfg.Get("mechanism"); param != "" {
//				mechanism = param
//			}
//			testUser, err := redpanda.NewUser(ctx, "testUser", &redpanda.UserArgs{
//				Password:      pulumi.String(userPw),
//				Mechanism:     pulumi.String(mechanism),
//				ClusterApiUrl: pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redpanda.NewAcl(ctx, "testAcl", &redpanda.AclArgs{
//				ResourceType:        pulumi.String("CLUSTER"),
//				ResourceName:        pulumi.String("kafka-cluster"),
//				ResourcePatternType: pulumi.String("LITERAL"),
//				Principal: testUser.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("User:%v", name), nil
//				}).(pulumi.StringOutput),
//				Host:           pulumi.String("*"),
//				Operation:      pulumi.String("ALTER"),
//				PermissionType: pulumi.String("ALLOW"),
//				ClusterApiUrl:  pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			userName := "test-username"
//			if param := cfg.Get("userName"); param != "" {
//				userName = param
//			}
//			topicName := "test-topic"
//			if param := cfg.Get("topicName"); param != "" {
//				topicName = param
//			}
//			partitionCount := float64(3)
//			if param := cfg.GetFloat64("partitionCount"); param != 0 {
//				partitionCount = param
//			}
//			replicationFactor := float64(3)
//			if param := cfg.GetFloat64("replicationFactor"); param != 0 {
//				replicationFactor = param
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Limitations
//
// Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("redpanda:index/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// The id of the cluster
	Id string `pulumi:"id"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// allows deletion of the cluster. defaults to true. Not recommended for production use
	AllowDeletion bool `pulumi:"allowDeletion"`
	// Must be one of aws or gcp
	CloudProvider string `pulumi:"cloudProvider"`
	// The URL of the cluster API
	ClusterApiUrl string `pulumi:"clusterApiUrl"`
	// Type of the cluster
	ClusterType string `pulumi:"clusterType"`
	// Connection type of the cluster
	ConnectionType string `pulumi:"connectionType"`
	// The id of the cluster
	Id string `pulumi:"id"`
	// Name of the cluster
	Name string `pulumi:"name"`
	// The id of the namespace in which to create the cluster
	NamespaceId string `pulumi:"namespaceId"`
	// The id of the network in which to create the cluster
	NetworkId string `pulumi:"networkId"`
	// Version of Redpanda to deploy
	RedpandaVersion string `pulumi:"redpandaVersion"`
	// Cloud provider specific region of the cluster
	Region string `pulumi:"region"`
	// Tags to apply to the cluster
	Tags map[string]string `pulumi:"tags"`
	// Throughput tier of the cluster
	ThroughputTier string `pulumi:"throughputTier"`
	// Cloud provider specific zones of the cluster
	Zones []string `pulumi:"zones"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// The id of the cluster
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// allows deletion of the cluster. defaults to true. Not recommended for production use
func (o LookupClusterResultOutput) AllowDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.AllowDeletion }).(pulumi.BoolOutput)
}

// Must be one of aws or gcp
func (o LookupClusterResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The URL of the cluster API
func (o LookupClusterResultOutput) ClusterApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterApiUrl }).(pulumi.StringOutput)
}

// Type of the cluster
func (o LookupClusterResultOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterType }).(pulumi.StringOutput)
}

// Connection type of the cluster
func (o LookupClusterResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// The id of the cluster
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the cluster
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The id of the namespace in which to create the cluster
func (o LookupClusterResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The id of the network in which to create the cluster
func (o LookupClusterResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Version of Redpanda to deploy
func (o LookupClusterResultOutput) RedpandaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.RedpandaVersion }).(pulumi.StringOutput)
}

// Cloud provider specific region of the cluster
func (o LookupClusterResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Region }).(pulumi.StringOutput)
}

// Tags to apply to the cluster
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Throughput tier of the cluster
func (o LookupClusterResultOutput) ThroughputTier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ThroughputTier }).(pulumi.StringOutput)
}

// Cloud provider specific zones of the cluster
func (o LookupClusterResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
