// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a Redpanda Cloud cluster
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redpanda.LookupCluster(ctx, &redpanda.LookupClusterArgs{
//				Id: "cluster_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage of a data source BYOC to manage users and ACLs
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := ""
//			if param := cfg.Get("clusterId"); param != "" {
//				clusterId = param
//			}
//			testCluster, err := redpanda.LookupCluster(ctx, &redpanda.LookupClusterArgs{
//				Id: clusterId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			topicConfig := map[string]interface{}{
//				"cleanup.policy":   "compact",
//				"flush.ms":         100,
//				"compression.type": "snappy",
//			}
//			if param := cfg.GetObject("topicConfig"); param != nil {
//				topicConfig = param
//			}
//			partitionCount := float64(3)
//			if param := cfg.GetFloat64("partitionCount"); param != 0 {
//				partitionCount = param
//			}
//			replicationFactor := float64(3)
//			if param := cfg.GetFloat64("replicationFactor"); param != 0 {
//				replicationFactor = param
//			}
//			_, err = redpanda.NewTopic(ctx, "testTopic", &redpanda.TopicArgs{
//				PartitionCount:    pulumi.Float64(partitionCount),
//				ReplicationFactor: pulumi.Float64(replicationFactor),
//				ClusterApiUrl:     pulumi.String(testCluster.ClusterApiUrl),
//				AllowDeletion:     pulumi.Bool(true),
//				Configuration:     pulumi.Any(topicConfig),
//			})
//			if err != nil {
//				return err
//			}
//			userPw := "password"
//			if param := cfg.Get("userPw"); param != "" {
//				userPw = param
//			}
//			mechanism := "scram-sha-256"
//			if param := cfg.Get("mechanism"); param != "" {
//				mechanism = param
//			}
//			testUser, err := redpanda.NewUser(ctx, "testUser", &redpanda.UserArgs{
//				Password:      pulumi.String(userPw),
//				Mechanism:     pulumi.String(mechanism),
//				ClusterApiUrl: pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redpanda.NewAcl(ctx, "testAcl", &redpanda.AclArgs{
//				ResourceType:        pulumi.String("CLUSTER"),
//				ResourceName:        pulumi.String("kafka-cluster"),
//				ResourcePatternType: pulumi.String("LITERAL"),
//				Principal: testUser.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("User:%v", name), nil
//				}).(pulumi.StringOutput),
//				Host:           pulumi.String("*"),
//				Operation:      pulumi.String("ALTER"),
//				PermissionType: pulumi.String("ALLOW"),
//				ClusterApiUrl:  pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			userName := "data-test-username"
//			if param := cfg.Get("userName"); param != "" {
//				userName = param
//			}
//			topicName := "data-test-topic"
//			if param := cfg.Get("topicName"); param != "" {
//				topicName = param
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Limitations
//
// Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("redpanda:index/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Whether cluster deletion is allowed.
	AllowDeletion bool `pulumi:"allowDeletion"`
	// AWS PrivateLink configuration.
	AwsPrivateLink GetClusterAwsPrivateLink `pulumi:"awsPrivateLink"`
	// Azure Private Link configuration.
	AzurePrivateLink GetClusterAzurePrivateLink `pulumi:"azurePrivateLink"`
	// Cloud provider where resources are created.
	CloudProvider string `pulumi:"cloudProvider"`
	// The URL of the cluster API.
	ClusterApiUrl string `pulumi:"clusterApiUrl"`
	// Cluster type. Type is immutable and can only be set on cluster creation.
	ClusterType string `pulumi:"clusterType"`
	// Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
	ConnectionType string `pulumi:"connectionType"`
	// Timestamp when the cluster was created.
	CreatedAt string `pulumi:"createdAt"`
	// Customer managed resources configuration for the cluster.
	CustomerManagedResources GetClusterCustomerManagedResources `pulumi:"customerManagedResources"`
	// If true, GCP global access is enabled.
	GcpGlobalAccessEnabled bool `pulumi:"gcpGlobalAccessEnabled"`
	// GCP Private Service Connect configuration.
	GcpPrivateServiceConnect GetClusterGcpPrivateServiceConnect `pulumi:"gcpPrivateServiceConnect"`
	// HTTP Proxy properties.
	HttpProxy GetClusterHttpProxy `pulumi:"httpProxy"`
	// ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
	Id string `pulumi:"id"`
	// Cluster's Kafka API properties.
	KafkaApi GetClusterKafkaApi `pulumi:"kafkaApi"`
	// Kafka Connect configuration.
	KafkaConnect GetClusterKafkaConnect `pulumi:"kafkaConnect"`
	// Maintenance window configuration for the cluster.
	MaintenanceWindowConfig GetClusterMaintenanceWindowConfig `pulumi:"maintenanceWindowConfig"`
	// Unique name of the cluster.
	Name string `pulumi:"name"`
	// Network ID where cluster is placed.
	NetworkId string `pulumi:"networkId"`
	// Prometheus metrics endpoint properties.
	Prometheus GetClusterPrometheus `pulumi:"prometheus"`
	// IDs of clusters that can create read-only topics from this cluster.
	ReadReplicaClusterIds []string `pulumi:"readReplicaClusterIds"`
	// Redpanda Console properties.
	RedpandaConsole GetClusterRedpandaConsole `pulumi:"redpandaConsole"`
	// Current Redpanda version of the cluster.
	RedpandaVersion string `pulumi:"redpandaVersion"`
	// Cloud provider region.
	Region string `pulumi:"region"`
	// Resource group ID of the cluster.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// Schema Registry properties.
	SchemaRegistry GetClusterSchemaRegistry `pulumi:"schemaRegistry"`
	// Current state of the cluster.
	State string `pulumi:"state"`
	// Detailed state description when cluster is in a non-ready state.
	StateDescription GetClusterStateDescription `pulumi:"stateDescription"`
	// Tags placed on cloud resources.
	Tags map[string]string `pulumi:"tags"`
	// Throughput tier of the cluster.
	ThroughputTier string `pulumi:"throughputTier"`
	// Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
	Zones []string `pulumi:"zones"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterResultOutput, error) {
			args := v.(LookupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("redpanda:index/getCluster:getCluster", args, LookupClusterResultOutput{}, options).(LookupClusterResultOutput), nil
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// Whether cluster deletion is allowed.
func (o LookupClusterResultOutput) AllowDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.AllowDeletion }).(pulumi.BoolOutput)
}

// AWS PrivateLink configuration.
func (o LookupClusterResultOutput) AwsPrivateLink() GetClusterAwsPrivateLinkOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterAwsPrivateLink { return v.AwsPrivateLink }).(GetClusterAwsPrivateLinkOutput)
}

// Azure Private Link configuration.
func (o LookupClusterResultOutput) AzurePrivateLink() GetClusterAzurePrivateLinkOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterAzurePrivateLink { return v.AzurePrivateLink }).(GetClusterAzurePrivateLinkOutput)
}

// Cloud provider where resources are created.
func (o LookupClusterResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The URL of the cluster API.
func (o LookupClusterResultOutput) ClusterApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterApiUrl }).(pulumi.StringOutput)
}

// Cluster type. Type is immutable and can only be set on cluster creation.
func (o LookupClusterResultOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterType }).(pulumi.StringOutput)
}

// Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
func (o LookupClusterResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// Timestamp when the cluster was created.
func (o LookupClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Customer managed resources configuration for the cluster.
func (o LookupClusterResultOutput) CustomerManagedResources() GetClusterCustomerManagedResourcesOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterCustomerManagedResources { return v.CustomerManagedResources }).(GetClusterCustomerManagedResourcesOutput)
}

// If true, GCP global access is enabled.
func (o LookupClusterResultOutput) GcpGlobalAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.GcpGlobalAccessEnabled }).(pulumi.BoolOutput)
}

// GCP Private Service Connect configuration.
func (o LookupClusterResultOutput) GcpPrivateServiceConnect() GetClusterGcpPrivateServiceConnectOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterGcpPrivateServiceConnect { return v.GcpPrivateServiceConnect }).(GetClusterGcpPrivateServiceConnectOutput)
}

// HTTP Proxy properties.
func (o LookupClusterResultOutput) HttpProxy() GetClusterHttpProxyOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterHttpProxy { return v.HttpProxy }).(GetClusterHttpProxyOutput)
}

// ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Cluster's Kafka API properties.
func (o LookupClusterResultOutput) KafkaApi() GetClusterKafkaApiOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterKafkaApi { return v.KafkaApi }).(GetClusterKafkaApiOutput)
}

// Kafka Connect configuration.
func (o LookupClusterResultOutput) KafkaConnect() GetClusterKafkaConnectOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterKafkaConnect { return v.KafkaConnect }).(GetClusterKafkaConnectOutput)
}

// Maintenance window configuration for the cluster.
func (o LookupClusterResultOutput) MaintenanceWindowConfig() GetClusterMaintenanceWindowConfigOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterMaintenanceWindowConfig { return v.MaintenanceWindowConfig }).(GetClusterMaintenanceWindowConfigOutput)
}

// Unique name of the cluster.
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network ID where cluster is placed.
func (o LookupClusterResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Prometheus metrics endpoint properties.
func (o LookupClusterResultOutput) Prometheus() GetClusterPrometheusOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterPrometheus { return v.Prometheus }).(GetClusterPrometheusOutput)
}

// IDs of clusters that can create read-only topics from this cluster.
func (o LookupClusterResultOutput) ReadReplicaClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.ReadReplicaClusterIds }).(pulumi.StringArrayOutput)
}

// Redpanda Console properties.
func (o LookupClusterResultOutput) RedpandaConsole() GetClusterRedpandaConsoleOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterRedpandaConsole { return v.RedpandaConsole }).(GetClusterRedpandaConsoleOutput)
}

// Current Redpanda version of the cluster.
func (o LookupClusterResultOutput) RedpandaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.RedpandaVersion }).(pulumi.StringOutput)
}

// Cloud provider region.
func (o LookupClusterResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Region }).(pulumi.StringOutput)
}

// Resource group ID of the cluster.
func (o LookupClusterResultOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Schema Registry properties.
func (o LookupClusterResultOutput) SchemaRegistry() GetClusterSchemaRegistryOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterSchemaRegistry { return v.SchemaRegistry }).(GetClusterSchemaRegistryOutput)
}

// Current state of the cluster.
func (o LookupClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.State }).(pulumi.StringOutput)
}

// Detailed state description when cluster is in a non-ready state.
func (o LookupClusterResultOutput) StateDescription() GetClusterStateDescriptionOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterStateDescription { return v.StateDescription }).(GetClusterStateDescriptionOutput)
}

// Tags placed on cloud resources.
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Throughput tier of the cluster.
func (o LookupClusterResultOutput) ThroughputTier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ThroughputTier }).(pulumi.StringOutput)
}

// Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
func (o LookupClusterResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
