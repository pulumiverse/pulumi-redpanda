// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a Redpanda Cloud serverless cluster
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redpanda.LookupServerlessCluster(ctx, &redpanda.LookupServerlessClusterArgs{
//				Id: "serverless_cluster_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage to create a serverless cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := redpanda.NewResourceGroup(ctx, "testResourceGroup", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "eu-west-1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			_, err = redpanda.NewServerlessCluster(ctx, "testServerlessCluster", &redpanda.ServerlessClusterArgs{
//				ResourceGroupId:  testResourceGroup.ID(),
//				ServerlessRegion: pulumi.String(region),
//			})
//			if err != nil {
//				return err
//			}
//			resourceGroupName := "testgroup"
//			if param := cfg.Get("resourceGroupName"); param != "" {
//				resourceGroupName = param
//			}
//			clusterName := "testname"
//			if param := cfg.Get("clusterName"); param != "" {
//				clusterName = param
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Limitations
//
// Can only be used with Redpanda Cloud serverless clusters.
func LookupServerlessCluster(ctx *pulumi.Context, args *LookupServerlessClusterArgs, opts ...pulumi.InvokeOption) (*LookupServerlessClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerlessClusterResult
	err := ctx.Invoke("redpanda:index/getServerlessCluster:getServerlessCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessCluster.
type LookupServerlessClusterArgs struct {
	// The ID of the serverless cluster
	Id string `pulumi:"id"`
}

// A collection of values returned by getServerlessCluster.
type LookupServerlessClusterResult struct {
	// The URL of the cluster API
	ClusterApiUrl string `pulumi:"clusterApiUrl"`
	// The ID of the serverless cluster
	Id string `pulumi:"id"`
	// Name of the serverless cluster
	Name string `pulumi:"name"`
	// The ID of the resource group in which to create the serverless cluster
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// Redpanda specific region for the serverless cluster
	ServerlessRegion string `pulumi:"serverlessRegion"`
}

func LookupServerlessClusterOutput(ctx *pulumi.Context, args LookupServerlessClusterOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerlessClusterResultOutput, error) {
			args := v.(LookupServerlessClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("redpanda:index/getServerlessCluster:getServerlessCluster", args, LookupServerlessClusterResultOutput{}, options).(LookupServerlessClusterResultOutput), nil
		}).(LookupServerlessClusterResultOutput)
}

// A collection of arguments for invoking getServerlessCluster.
type LookupServerlessClusterOutputArgs struct {
	// The ID of the serverless cluster
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupServerlessClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessClusterArgs)(nil)).Elem()
}

// A collection of values returned by getServerlessCluster.
type LookupServerlessClusterResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessClusterResult)(nil)).Elem()
}

func (o LookupServerlessClusterResultOutput) ToLookupServerlessClusterResultOutput() LookupServerlessClusterResultOutput {
	return o
}

func (o LookupServerlessClusterResultOutput) ToLookupServerlessClusterResultOutputWithContext(ctx context.Context) LookupServerlessClusterResultOutput {
	return o
}

// The URL of the cluster API
func (o LookupServerlessClusterResultOutput) ClusterApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessClusterResult) string { return v.ClusterApiUrl }).(pulumi.StringOutput)
}

// The ID of the serverless cluster
func (o LookupServerlessClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the serverless cluster
func (o LookupServerlessClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the resource group in which to create the serverless cluster
func (o LookupServerlessClusterResultOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessClusterResult) string { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// Redpanda specific region for the serverless cluster
func (o LookupServerlessClusterResultOutput) ServerlessRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessClusterResult) string { return v.ServerlessRegion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerlessClusterResultOutput{})
}
