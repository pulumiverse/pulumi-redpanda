// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Data source for a list of Redpanda Cloud serverless regions
func GetServerlessRegions(ctx *pulumi.Context, args *GetServerlessRegionsArgs, opts ...pulumi.InvokeOption) (*GetServerlessRegionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServerlessRegionsResult
	err := ctx.Invoke("redpanda:index/getServerlessRegions:getServerlessRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessRegions.
type GetServerlessRegionsArgs struct {
	// Cloud provider where the serverless regions exist
	CloudProvider string `pulumi:"cloudProvider"`
}

// A collection of values returned by getServerlessRegions.
type GetServerlessRegionsResult struct {
	// Cloud provider where the serverless regions exist
	CloudProvider string `pulumi:"cloudProvider"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Serverless regions available for the cloud provider
	ServerlessRegions []GetServerlessRegionsServerlessRegion `pulumi:"serverlessRegions"`
}

func GetServerlessRegionsOutput(ctx *pulumi.Context, args GetServerlessRegionsOutputArgs, opts ...pulumi.InvokeOption) GetServerlessRegionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServerlessRegionsResultOutput, error) {
			args := v.(GetServerlessRegionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("redpanda:index/getServerlessRegions:getServerlessRegions", args, GetServerlessRegionsResultOutput{}, options).(GetServerlessRegionsResultOutput), nil
		}).(GetServerlessRegionsResultOutput)
}

// A collection of arguments for invoking getServerlessRegions.
type GetServerlessRegionsOutputArgs struct {
	// Cloud provider where the serverless regions exist
	CloudProvider pulumi.StringInput `pulumi:"cloudProvider"`
}

func (GetServerlessRegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerlessRegionsArgs)(nil)).Elem()
}

// A collection of values returned by getServerlessRegions.
type GetServerlessRegionsResultOutput struct{ *pulumi.OutputState }

func (GetServerlessRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerlessRegionsResult)(nil)).Elem()
}

func (o GetServerlessRegionsResultOutput) ToGetServerlessRegionsResultOutput() GetServerlessRegionsResultOutput {
	return o
}

func (o GetServerlessRegionsResultOutput) ToGetServerlessRegionsResultOutputWithContext(ctx context.Context) GetServerlessRegionsResultOutput {
	return o
}

// Cloud provider where the serverless regions exist
func (o GetServerlessRegionsResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerlessRegionsResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServerlessRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerlessRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Serverless regions available for the cloud provider
func (o GetServerlessRegionsResultOutput) ServerlessRegions() GetServerlessRegionsServerlessRegionArrayOutput {
	return o.ApplyT(func(v GetServerlessRegionsResult) []GetServerlessRegionsServerlessRegion { return v.ServerlessRegions }).(GetServerlessRegionsServerlessRegionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerlessRegionsResultOutput{})
}
