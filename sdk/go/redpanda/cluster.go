// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Enables the provisioning and management of Redpanda clusters on AWS and GCP. A cluster must always have a network and namespace.
//
// ## Usage
//
// ### On AWS
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testNamespace, err := redpanda.NewNamespace(ctx, "testNamespace", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "us-east-1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			cloudProvider := "aws"
//			if param := cfg.Get("cloudProvider"); param != "" {
//				cloudProvider = param
//			}
//			testNetwork, err := redpanda.NewNetwork(ctx, "testNetwork", &redpanda.NetworkArgs{
//				NamespaceId:   testNamespace.ID(),
//				CloudProvider: pulumi.String(cloudProvider),
//				Region:        pulumi.String(region),
//				ClusterType:   pulumi.String("dedicated"),
//				CidrBlock:     pulumi.String("10.0.0.0/20"),
//			})
//			if err != nil {
//				return err
//			}
//			zones := []string{
//				"use1-az2",
//				"use1-az4",
//				"use1-az6",
//			}
//			if param := cfg.GetObject("zones"); param != nil {
//				zones = param
//			}
//			throughputTier := "tier-1-aws-v2-arm"
//			if param := cfg.Get("throughputTier"); param != "" {
//				throughputTier = param
//			}
//			_, err = redpanda.NewCluster(ctx, "testCluster", &redpanda.ClusterArgs{
//				NamespaceId:    testNamespace.ID(),
//				NetworkId:      testNetwork.ID(),
//				CloudProvider:  pulumi.String(cloudProvider),
//				Region:         pulumi.String(region),
//				ClusterType:    pulumi.String("dedicated"),
//				ConnectionType: pulumi.String("public"),
//				ThroughputTier: pulumi.String(throughputTier),
//				Zones:          pulumi.Any(zones),
//				AllowDeletion:  pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			namespaceName := "testname"
//			if param := cfg.Get("namespaceName"); param != "" {
//				namespaceName = param
//			}
//			networkName := "testname"
//			if param := cfg.Get("networkName"); param != "" {
//				networkName = param
//			}
//			clusterName := "testname"
//			if param := cfg.Get("clusterName"); param != "" {
//				clusterName = param
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### On GCP
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testNamespace, err := redpanda.NewNamespace(ctx, "testNamespace", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "us-central1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			cloudProvider := "gcp"
//			if param := cfg.Get("cloudProvider"); param != "" {
//				cloudProvider = param
//			}
//			testNetwork, err := redpanda.NewNetwork(ctx, "testNetwork", &redpanda.NetworkArgs{
//				NamespaceId:   testNamespace.ID(),
//				CloudProvider: pulumi.String(cloudProvider),
//				Region:        pulumi.String(region),
//				ClusterType:   pulumi.String("dedicated"),
//				CidrBlock:     pulumi.String("10.0.0.0/20"),
//			})
//			if err != nil {
//				return err
//			}
//			zones := []string{
//				"us-central1-a",
//				"us-central1-b",
//				"us-central1-c",
//			}
//			if param := cfg.GetObject("zones"); param != nil {
//				zones = param
//			}
//			throughputTier := "tier-1-gcp-um4g"
//			if param := cfg.Get("throughputTier"); param != "" {
//				throughputTier = param
//			}
//			_, err = redpanda.NewCluster(ctx, "testCluster", &redpanda.ClusterArgs{
//				NamespaceId:    testNamespace.ID(),
//				NetworkId:      testNetwork.ID(),
//				CloudProvider:  pulumi.String(cloudProvider),
//				Region:         pulumi.String(region),
//				ClusterType:    pulumi.String("dedicated"),
//				ConnectionType: pulumi.String("public"),
//				ThroughputTier: pulumi.String(throughputTier),
//				Zones:          pulumi.Any(zones),
//				AllowDeletion:  pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			clusterName := ""
//			if param := cfg.Get("clusterName"); param != "" {
//				clusterName = param
//			}
//			namespaceName := ""
//			if param := cfg.Get("namespaceName"); param != "" {
//				namespaceName = param
//			}
//			networkName := ""
//			if param := cfg.Get("networkName"); param != "" {
//				networkName = param
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Limitations
//
// We are not currently able to support the provisioning of "BYOC" clusters using this provider. A workaround is available
//
//   - First use [RPK](https://docs.redpanda.com/current/deploy/deployment-option/cloud/create-byoc-cluster-aws/) to provision the cluster
//   - Then use the provider's Cluster data source to reference the cluster for use in other resources.
//
// ### Example Usage of a data source BYOC to manage users and ACLs
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/videmsky/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := ""
//			if param := cfg.Get("clusterId"); param != "" {
//				clusterId = param
//			}
//			testCluster, err := redpanda.LookupCluster(ctx, &redpanda.LookupClusterArgs{
//				Id: clusterId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			userPw := "password"
//			if param := cfg.Get("userPw"); param != "" {
//				userPw = param
//			}
//			mechanism := "scram-sha-256"
//			if param := cfg.Get("mechanism"); param != "" {
//				mechanism = param
//			}
//			testUser, err := redpanda.NewUser(ctx, "testUser", &redpanda.UserArgs{
//				Password:      pulumi.String(userPw),
//				Mechanism:     pulumi.String(mechanism),
//				ClusterApiUrl: pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redpanda.NewAcl(ctx, "testAcl", &redpanda.AclArgs{
//				ResourceType:        pulumi.String("CLUSTER"),
//				ResourceName:        pulumi.String("kafka-cluster"),
//				ResourcePatternType: pulumi.String("LITERAL"),
//				Principal: testUser.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("User:%v", name), nil
//				}).(pulumi.StringOutput),
//				Host:           pulumi.String("*"),
//				Operation:      pulumi.String("ALTER"),
//				PermissionType: pulumi.String("ALLOW"),
//				ClusterApiUrl:  pulumi.String(testCluster.ClusterApiUrl),
//			})
//			if err != nil {
//				return err
//			}
//			userName := "test-username"
//			if param := cfg.Get("userName"); param != "" {
//				userName = param
//			}
//			topicName := "test-topic"
//			if param := cfg.Get("topicName"); param != "" {
//				topicName = param
//			}
//			partitionCount := float64(3)
//			if param := cfg.GetFloat64("partitionCount"); param != 0 {
//				partitionCount = param
//			}
//			replicationFactor := float64(3)
//			if param := cfg.GetFloat64("replicationFactor"); param != 0 {
//				replicationFactor = param
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import redpanda:index/cluster:Cluster example clusterId
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// allows deletion of the cluster. defaults to true. should probably be set to false for production use
	AllowDeletion pulumi.BoolPtrOutput `pulumi:"allowDeletion"`
	// Must be one of aws or gcp
	CloudProvider pulumi.StringPtrOutput `pulumi:"cloudProvider"`
	// The URL of the cluster API
	ClusterApiUrl pulumi.StringOutput `pulumi:"clusterApiUrl"`
	// Type of the cluster
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Connection type of the cluster
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Name of the cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the namespace in which to create the cluster
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// The id of the network in which to create the cluster
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Version of Redpanda to deploy
	RedpandaVersion pulumi.StringPtrOutput `pulumi:"redpandaVersion"`
	// Cloud provider specific region of the cluster
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Tags to apply to the cluster
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Throughput tier of the cluster
	ThroughputTier pulumi.StringOutput `pulumi:"throughputTier"`
	// Cloud provider specific zones of the cluster
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.ThroughputTier == nil {
		return nil, errors.New("invalid value for required argument 'ThroughputTier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("redpanda:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("redpanda:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// allows deletion of the cluster. defaults to true. should probably be set to false for production use
	AllowDeletion *bool `pulumi:"allowDeletion"`
	// Must be one of aws or gcp
	CloudProvider *string `pulumi:"cloudProvider"`
	// The URL of the cluster API
	ClusterApiUrl *string `pulumi:"clusterApiUrl"`
	// Type of the cluster
	ClusterType *string `pulumi:"clusterType"`
	// Connection type of the cluster
	ConnectionType *string `pulumi:"connectionType"`
	// Name of the cluster
	Name *string `pulumi:"name"`
	// The id of the namespace in which to create the cluster
	NamespaceId *string `pulumi:"namespaceId"`
	// The id of the network in which to create the cluster
	NetworkId *string `pulumi:"networkId"`
	// Version of Redpanda to deploy
	RedpandaVersion *string `pulumi:"redpandaVersion"`
	// Cloud provider specific region of the cluster
	Region *string `pulumi:"region"`
	// Tags to apply to the cluster
	Tags map[string]string `pulumi:"tags"`
	// Throughput tier of the cluster
	ThroughputTier *string `pulumi:"throughputTier"`
	// Cloud provider specific zones of the cluster
	Zones []string `pulumi:"zones"`
}

type ClusterState struct {
	// allows deletion of the cluster. defaults to true. should probably be set to false for production use
	AllowDeletion pulumi.BoolPtrInput
	// Must be one of aws or gcp
	CloudProvider pulumi.StringPtrInput
	// The URL of the cluster API
	ClusterApiUrl pulumi.StringPtrInput
	// Type of the cluster
	ClusterType pulumi.StringPtrInput
	// Connection type of the cluster
	ConnectionType pulumi.StringPtrInput
	// Name of the cluster
	Name pulumi.StringPtrInput
	// The id of the namespace in which to create the cluster
	NamespaceId pulumi.StringPtrInput
	// The id of the network in which to create the cluster
	NetworkId pulumi.StringPtrInput
	// Version of Redpanda to deploy
	RedpandaVersion pulumi.StringPtrInput
	// Cloud provider specific region of the cluster
	Region pulumi.StringPtrInput
	// Tags to apply to the cluster
	Tags pulumi.StringMapInput
	// Throughput tier of the cluster
	ThroughputTier pulumi.StringPtrInput
	// Cloud provider specific zones of the cluster
	Zones pulumi.StringArrayInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// allows deletion of the cluster. defaults to true. should probably be set to false for production use
	AllowDeletion *bool `pulumi:"allowDeletion"`
	// Must be one of aws or gcp
	CloudProvider *string `pulumi:"cloudProvider"`
	// Type of the cluster
	ClusterType string `pulumi:"clusterType"`
	// Connection type of the cluster
	ConnectionType string `pulumi:"connectionType"`
	// Name of the cluster
	Name *string `pulumi:"name"`
	// The id of the namespace in which to create the cluster
	NamespaceId string `pulumi:"namespaceId"`
	// The id of the network in which to create the cluster
	NetworkId string `pulumi:"networkId"`
	// Version of Redpanda to deploy
	RedpandaVersion *string `pulumi:"redpandaVersion"`
	// Cloud provider specific region of the cluster
	Region *string `pulumi:"region"`
	// Tags to apply to the cluster
	Tags map[string]string `pulumi:"tags"`
	// Throughput tier of the cluster
	ThroughputTier string `pulumi:"throughputTier"`
	// Cloud provider specific zones of the cluster
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// allows deletion of the cluster. defaults to true. should probably be set to false for production use
	AllowDeletion pulumi.BoolPtrInput
	// Must be one of aws or gcp
	CloudProvider pulumi.StringPtrInput
	// Type of the cluster
	ClusterType pulumi.StringInput
	// Connection type of the cluster
	ConnectionType pulumi.StringInput
	// Name of the cluster
	Name pulumi.StringPtrInput
	// The id of the namespace in which to create the cluster
	NamespaceId pulumi.StringInput
	// The id of the network in which to create the cluster
	NetworkId pulumi.StringInput
	// Version of Redpanda to deploy
	RedpandaVersion pulumi.StringPtrInput
	// Cloud provider specific region of the cluster
	Region pulumi.StringPtrInput
	// Tags to apply to the cluster
	Tags pulumi.StringMapInput
	// Throughput tier of the cluster
	ThroughputTier pulumi.StringInput
	// Cloud provider specific zones of the cluster
	Zones pulumi.StringArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// allows deletion of the cluster. defaults to true. should probably be set to false for production use
func (o ClusterOutput) AllowDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.AllowDeletion }).(pulumi.BoolPtrOutput)
}

// Must be one of aws or gcp
func (o ClusterOutput) CloudProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.CloudProvider }).(pulumi.StringPtrOutput)
}

// The URL of the cluster API
func (o ClusterOutput) ClusterApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterApiUrl }).(pulumi.StringOutput)
}

// Type of the cluster
func (o ClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// Connection type of the cluster
func (o ClusterOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Name of the cluster
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the namespace in which to create the cluster
func (o ClusterOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// The id of the network in which to create the cluster
func (o ClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Version of Redpanda to deploy
func (o ClusterOutput) RedpandaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.RedpandaVersion }).(pulumi.StringPtrOutput)
}

// Cloud provider specific region of the cluster
func (o ClusterOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Tags to apply to the cluster
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Throughput tier of the cluster
func (o ClusterOutput) ThroughputTier() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ThroughputTier }).(pulumi.StringOutput)
}

// Cloud provider specific zones of the cluster
func (o ClusterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
