// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redpanda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda/internal"
)

// Creates a network in the Redpanda Cloud.
//
// ## Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := redpanda.NewResourceGroup(ctx, "testResourceGroup", nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			region := "us-east-1"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			cloudProvider := "aws"
//			if param := cfg.Get("cloudProvider"); param != "" {
//				cloudProvider = param
//			}
//			_, err = redpanda.NewNetwork(ctx, "testNetwork", &redpanda.NetworkArgs{
//				ResourceGroupId: testResourceGroup.ID(),
//				CloudProvider:   pulumi.String(cloudProvider),
//				Region:          pulumi.String(region),
//				ClusterType:     pulumi.String("dedicated"),
//				CidrBlock:       pulumi.String("10.0.0.0/20"),
//			})
//			if err != nil {
//				return err
//			}
//			resourceGroupName := "testname"
//			if param := cfg.Get("resourceGroupName"); param != "" {
//				resourceGroupName = param
//			}
//			networkName := "testname"
//			if param := cfg.Get("networkName"); param != "" {
//				networkName = param
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import redpanda:index/network:Network example networkId
// ```
type Network struct {
	pulumi.CustomResourceState

	// The cidrBlock to create the network in
	CidrBlock pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	// The cloud provider to create the network in.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// The type of cluster this network is associated with, can be one of dedicated or cloud
	ClusterType              pulumi.StringOutput                      `pulumi:"clusterType"`
	CustomerManagedResources NetworkCustomerManagedResourcesPtrOutput `pulumi:"customerManagedResources"`
	// Name of the network
	Name pulumi.StringOutput `pulumi:"name"`
	// The region to create the network in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the resource group in which to create the network
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ResourceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("redpanda:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("redpanda:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// The cidrBlock to create the network in
	CidrBlock *string `pulumi:"cidrBlock"`
	// The cloud provider to create the network in.
	CloudProvider *string `pulumi:"cloudProvider"`
	// The type of cluster this network is associated with, can be one of dedicated or cloud
	ClusterType              *string                          `pulumi:"clusterType"`
	CustomerManagedResources *NetworkCustomerManagedResources `pulumi:"customerManagedResources"`
	// Name of the network
	Name *string `pulumi:"name"`
	// The region to create the network in.
	Region *string `pulumi:"region"`
	// The ID of the resource group in which to create the network
	ResourceGroupId *string `pulumi:"resourceGroupId"`
}

type NetworkState struct {
	// The cidrBlock to create the network in
	CidrBlock pulumi.StringPtrInput
	// The cloud provider to create the network in.
	CloudProvider pulumi.StringPtrInput
	// The type of cluster this network is associated with, can be one of dedicated or cloud
	ClusterType              pulumi.StringPtrInput
	CustomerManagedResources NetworkCustomerManagedResourcesPtrInput
	// Name of the network
	Name pulumi.StringPtrInput
	// The region to create the network in.
	Region pulumi.StringPtrInput
	// The ID of the resource group in which to create the network
	ResourceGroupId pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// The cidrBlock to create the network in
	CidrBlock *string `pulumi:"cidrBlock"`
	// The cloud provider to create the network in.
	CloudProvider string `pulumi:"cloudProvider"`
	// The type of cluster this network is associated with, can be one of dedicated or cloud
	ClusterType              string                           `pulumi:"clusterType"`
	CustomerManagedResources *NetworkCustomerManagedResources `pulumi:"customerManagedResources"`
	// Name of the network
	Name *string `pulumi:"name"`
	// The region to create the network in.
	Region string `pulumi:"region"`
	// The ID of the resource group in which to create the network
	ResourceGroupId string `pulumi:"resourceGroupId"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// The cidrBlock to create the network in
	CidrBlock pulumi.StringPtrInput
	// The cloud provider to create the network in.
	CloudProvider pulumi.StringInput
	// The type of cluster this network is associated with, can be one of dedicated or cloud
	ClusterType              pulumi.StringInput
	CustomerManagedResources NetworkCustomerManagedResourcesPtrInput
	// Name of the network
	Name pulumi.StringPtrInput
	// The region to create the network in.
	Region pulumi.StringInput
	// The ID of the resource group in which to create the network
	ResourceGroupId pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// The cidrBlock to create the network in
func (o NetworkOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The cloud provider to create the network in.
func (o NetworkOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// The type of cluster this network is associated with, can be one of dedicated or cloud
func (o NetworkOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

func (o NetworkOutput) CustomerManagedResources() NetworkCustomerManagedResourcesPtrOutput {
	return o.ApplyT(func(v *Network) NetworkCustomerManagedResourcesPtrOutput { return v.CustomerManagedResources }).(NetworkCustomerManagedResourcesPtrOutput)
}

// Name of the network
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region to create the network in.
func (o NetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the resource group in which to create the network
func (o NetworkOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
