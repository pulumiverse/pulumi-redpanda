// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Redpanda
{
    /// <summary>
    /// Creates an Access Control List (ACL) in a Redpanda cluster.
    /// 
    /// ## Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Redpanda = Pulumi.Redpanda;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNamespace = new Redpanda.Namespace("testNamespace");
    /// 
    ///     var config = new Config();
    ///     var region = config.Get("region") ?? "us-east-1";
    ///     var cloudProvider = config.Get("cloudProvider") ?? "aws";
    ///     var testNetwork = new Redpanda.Network("testNetwork", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         CidrBlock = "10.0.0.0/20",
    ///     });
    /// 
    ///     var zones = config.GetObject&lt;dynamic&gt;("zones") ?? new[]
    ///     {
    ///         "use1-az2",
    ///         "use1-az4",
    ///         "use1-az6",
    ///     };
    ///     var throughputTier = config.Get("throughputTier") ?? "tier-1-aws-v2-arm";
    ///     var testCluster = new Redpanda.Cluster("testCluster", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         NetworkId = testNetwork.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         ConnectionType = "public",
    ///         ThroughputTier = throughputTier,
    ///         Zones = zones,
    ///         AllowDeletion = true,
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    ///     var userPw = config.Get("userPw") ?? "password";
    ///     var mechanism = config.Get("mechanism") ?? "scram-sha-256";
    ///     var testUser = new Redpanda.User("testUser", new()
    ///     {
    ///         Password = userPw,
    ///         Mechanism = mechanism,
    ///         ClusterApiUrl = testCluster.ClusterApiUrl,
    ///     });
    /// 
    ///     var partitionCount = config.GetDouble("partitionCount") ?? 3;
    ///     var replicationFactor = config.GetDouble("replicationFactor") ?? 3;
    ///     var testTopic = new Redpanda.Topic("testTopic", new()
    ///     {
    ///         PartitionCount = partitionCount,
    ///         ReplicationFactor = replicationFactor,
    ///         ClusterApiUrl = testCluster.ClusterApiUrl,
    ///         AllowDeletion = true,
    ///     });
    /// 
    ///     var testAcl = new Redpanda.Acl("testAcl", new()
    ///     {
    ///         ResourceType = "TOPIC",
    ///         ResourceName = testTopic.Name,
    ///         ResourcePatternType = "LITERAL",
    ///         Principal = testUser.Name.Apply(name =&gt; $"User:{name}"),
    ///         Host = "*",
    ///         Operation = "READ",
    ///         PermissionType = "ALLOW",
    ///         ClusterApiUrl = testCluster.ClusterApiUrl,
    ///     });
    /// 
    ///     var namespaceName = config.Get("namespaceName") ?? "testname";
    ///     var networkName = config.Get("networkName") ?? "testname";
    ///     var clusterName = config.Get("clusterName") ?? "testname";
    ///     var userName = config.Get("userName") ?? "test-username";
    ///     var topicName = config.Get("topicName") ?? "test-topic";
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Limitations
    /// 
    /// We are not currently able to support ACL creation in self hosted clusters. This is an area of active development so expect that to change soon.
    /// 
    /// ## Import
    /// 
    /// We do not support the import of ACLs into the Redpanda provider at this time.
    /// </summary>
    [RedpandaResourceType("redpanda:index/acl:Acl")]
    public partial class Acl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        /// </summary>
        [Output("clusterApiUrl")]
        public Output<string> ClusterApiUrl { get; private set; } = null!;

        /// <summary>
        /// The host address to use for this ACL
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The operation type that shall be allowed or denied (e.g READ)
        /// </summary>
        [Output("operation")]
        public Output<string> Operation { get; private set; } = null!;

        /// <summary>
        /// The permission type. It determines whether the operation should be ALLOWED or DENIED
        /// </summary>
        [Output("permissionType")]
        public Output<string> PermissionType { get; private set; } = null!;

        /// <summary>
        /// The principal to apply this ACL for
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// The name of the resource this ACL entry will be on
        /// </summary>
        [Output("resourceName")]
        public Output<string> ResourceName { get; private set; } = null!;

        /// <summary>
        /// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        /// </summary>
        [Output("resourcePatternType")]
        public Output<string> ResourcePatternType { get; private set; } = null!;

        /// <summary>
        /// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;


        /// <summary>
        /// Create a Acl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acl(string name, AclArgs args, CustomResourceOptions? options = null)
            : base("redpanda:index/acl:Acl", name, args ?? new AclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acl(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
            : base("redpanda:index/acl:Acl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acl Get(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
        {
            return new Acl(name, id, state, options);
        }
    }

    public sealed class AclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        /// </summary>
        [Input("clusterApiUrl", required: true)]
        public Input<string> ClusterApiUrl { get; set; } = null!;

        /// <summary>
        /// The host address to use for this ACL
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The operation type that shall be allowed or denied (e.g READ)
        /// </summary>
        [Input("operation", required: true)]
        public Input<string> Operation { get; set; } = null!;

        /// <summary>
        /// The permission type. It determines whether the operation should be ALLOWED or DENIED
        /// </summary>
        [Input("permissionType", required: true)]
        public Input<string> PermissionType { get; set; } = null!;

        /// <summary>
        /// The principal to apply this ACL for
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// The name of the resource this ACL entry will be on
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        /// <summary>
        /// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        /// </summary>
        [Input("resourcePatternType", required: true)]
        public Input<string> ResourcePatternType { get; set; } = null!;

        /// <summary>
        /// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        public AclArgs()
        {
        }
        public static new AclArgs Empty => new AclArgs();
    }

    public sealed class AclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
        /// </summary>
        [Input("clusterApiUrl")]
        public Input<string>? ClusterApiUrl { get; set; }

        /// <summary>
        /// The host address to use for this ACL
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The operation type that shall be allowed or denied (e.g READ)
        /// </summary>
        [Input("operation")]
        public Input<string>? Operation { get; set; }

        /// <summary>
        /// The permission type. It determines whether the operation should be ALLOWED or DENIED
        /// </summary>
        [Input("permissionType")]
        public Input<string>? PermissionType { get; set; }

        /// <summary>
        /// The principal to apply this ACL for
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// The name of the resource this ACL entry will be on
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
        /// </summary>
        [Input("resourcePatternType")]
        public Input<string>? ResourcePatternType { get; set; }

        /// <summary>
        /// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        public AclState()
        {
        }
        public static new AclState Empty => new AclState();
    }
}
