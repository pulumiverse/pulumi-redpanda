// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Redpanda
{
    /// <summary>
    /// Enables the provisioning and management of Redpanda clusters on AWS and GCP. A cluster must always have a network and namespace.
    /// 
    /// ## Usage
    /// 
    /// ### On AWS
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Redpanda = Pulumi.Redpanda;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNamespace = new Redpanda.Namespace("testNamespace");
    /// 
    ///     var config = new Config();
    ///     var region = config.Get("region") ?? "us-east-1";
    ///     var cloudProvider = config.Get("cloudProvider") ?? "aws";
    ///     var testNetwork = new Redpanda.Network("testNetwork", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         CidrBlock = "10.0.0.0/20",
    ///     });
    /// 
    ///     var zones = config.GetObject&lt;dynamic&gt;("zones") ?? new[]
    ///     {
    ///         "use1-az2",
    ///         "use1-az4",
    ///         "use1-az6",
    ///     };
    ///     var throughputTier = config.Get("throughputTier") ?? "tier-1-aws-v2-arm";
    ///     var testCluster = new Redpanda.Cluster("testCluster", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         NetworkId = testNetwork.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         ConnectionType = "public",
    ///         ThroughputTier = throughputTier,
    ///         Zones = zones,
    ///         AllowDeletion = true,
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    ///     var namespaceName = config.Get("namespaceName") ?? "testname";
    ///     var networkName = config.Get("networkName") ?? "testname";
    ///     var clusterName = config.Get("clusterName") ?? "testname";
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### On GCP
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Redpanda = Pulumi.Redpanda;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNamespace = new Redpanda.Namespace("testNamespace");
    /// 
    ///     var config = new Config();
    ///     var region = config.Get("region") ?? "us-central1";
    ///     var cloudProvider = config.Get("cloudProvider") ?? "gcp";
    ///     var testNetwork = new Redpanda.Network("testNetwork", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         CidrBlock = "10.0.0.0/20",
    ///     });
    /// 
    ///     var zones = config.GetObject&lt;dynamic&gt;("zones") ?? new[]
    ///     {
    ///         "us-central1-a",
    ///         "us-central1-b",
    ///         "us-central1-c",
    ///     };
    ///     var throughputTier = config.Get("throughputTier") ?? "tier-1-gcp-um4g";
    ///     var testCluster = new Redpanda.Cluster("testCluster", new()
    ///     {
    ///         NamespaceId = testNamespace.Id,
    ///         NetworkId = testNetwork.Id,
    ///         CloudProvider = cloudProvider,
    ///         Region = region,
    ///         ClusterType = "dedicated",
    ///         ConnectionType = "public",
    ///         ThroughputTier = throughputTier,
    ///         Zones = zones,
    ///         AllowDeletion = true,
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    ///     var clusterName = config.Get("clusterName") ?? "";
    ///     var namespaceName = config.Get("namespaceName") ?? "";
    ///     var networkName = config.Get("networkName") ?? "";
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Limitations
    /// 
    /// We are not currently able to support the provisioning of "BYOC" clusters using this provider. A workaround is available
    /// 
    ///  * First use [RPK](https://docs.redpanda.com/current/deploy/deployment-option/cloud/create-byoc-cluster-aws/) to provision the cluster
    ///  * Then use the provider's redpanda.Cluster data source to reference the cluster for use in other resources.
    /// 
    /// ### Example Usage of a data source BYOC to manage users and ACLs
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Redpanda = Pulumi.Redpanda;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var clusterId = config.Get("clusterId") ?? "";
    ///     var testCluster = Redpanda.GetCluster.Invoke(new()
    ///     {
    ///         Id = clusterId,
    ///     });
    /// 
    ///     var userPw = config.Get("userPw") ?? "password";
    ///     var mechanism = config.Get("mechanism") ?? "scram-sha-256";
    ///     var testUser = new Redpanda.User("testUser", new()
    ///     {
    ///         Password = userPw,
    ///         Mechanism = mechanism,
    ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
    ///     });
    /// 
    ///     var testAcl = new Redpanda.Acl("testAcl", new()
    ///     {
    ///         ResourceType = "CLUSTER",
    ///         ResourceName = "kafka-cluster",
    ///         ResourcePatternType = "LITERAL",
    ///         Principal = testUser.Name.Apply(name =&gt; $"User:{name}"),
    ///         Host = "*",
    ///         Operation = "ALTER",
    ///         PermissionType = "ALLOW",
    ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
    ///     });
    /// 
    ///     var userName = config.Get("userName") ?? "test-username";
    ///     var topicName = config.Get("topicName") ?? "test-topic";
    ///     var partitionCount = config.GetDouble("partitionCount") ?? 3;
    ///     var replicationFactor = config.GetDouble("replicationFactor") ?? 3;
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import redpanda:index/cluster:Cluster example clusterId
    /// ```
    /// </summary>
    [RedpandaResourceType("redpanda:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// allows deletion of the cluster. defaults to true. should probably be set to false for production use
        /// </summary>
        [Output("allowDeletion")]
        public Output<bool?> AllowDeletion { get; private set; } = null!;

        /// <summary>
        /// Must be one of aws or gcp
        /// </summary>
        [Output("cloudProvider")]
        public Output<string?> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The URL of the cluster API
        /// </summary>
        [Output("clusterApiUrl")]
        public Output<string> ClusterApiUrl { get; private set; } = null!;

        /// <summary>
        /// Type of the cluster
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Connection type of the cluster
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the namespace in which to create the cluster
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// The id of the network in which to create the cluster
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Version of Redpanda to deploy
        /// </summary>
        [Output("redpandaVersion")]
        public Output<string?> RedpandaVersion { get; private set; } = null!;

        /// <summary>
        /// Cloud provider specific region of the cluster
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the cluster
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Throughput tier of the cluster
        /// </summary>
        [Output("throughputTier")]
        public Output<string> ThroughputTier { get; private set; } = null!;

        /// <summary>
        /// Cloud provider specific zones of the cluster
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("redpanda:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("redpanda:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// allows deletion of the cluster. defaults to true. should probably be set to false for production use
        /// </summary>
        [Input("allowDeletion")]
        public Input<bool>? AllowDeletion { get; set; }

        /// <summary>
        /// Must be one of aws or gcp
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// Type of the cluster
        /// </summary>
        [Input("clusterType", required: true)]
        public Input<string> ClusterType { get; set; } = null!;

        /// <summary>
        /// Connection type of the cluster
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// Name of the cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the namespace in which to create the cluster
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        /// <summary>
        /// The id of the network in which to create the cluster
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// Version of Redpanda to deploy
        /// </summary>
        [Input("redpandaVersion")]
        public Input<string>? RedpandaVersion { get; set; }

        /// <summary>
        /// Cloud provider specific region of the cluster
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the cluster
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Throughput tier of the cluster
        /// </summary>
        [Input("throughputTier", required: true)]
        public Input<string> ThroughputTier { get; set; } = null!;

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Cloud provider specific zones of the cluster
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// allows deletion of the cluster. defaults to true. should probably be set to false for production use
        /// </summary>
        [Input("allowDeletion")]
        public Input<bool>? AllowDeletion { get; set; }

        /// <summary>
        /// Must be one of aws or gcp
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The URL of the cluster API
        /// </summary>
        [Input("clusterApiUrl")]
        public Input<string>? ClusterApiUrl { get; set; }

        /// <summary>
        /// Type of the cluster
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Connection type of the cluster
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Name of the cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the namespace in which to create the cluster
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// The id of the network in which to create the cluster
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Version of Redpanda to deploy
        /// </summary>
        [Input("redpandaVersion")]
        public Input<string>? RedpandaVersion { get; set; }

        /// <summary>
        /// Cloud provider specific region of the cluster
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the cluster
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Throughput tier of the cluster
        /// </summary>
        [Input("throughputTier")]
        public Input<string>? ThroughputTier { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Cloud provider specific zones of the cluster
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
