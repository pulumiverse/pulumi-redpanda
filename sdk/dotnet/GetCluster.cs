// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Redpanda
{
    public static class GetCluster
    {
        /// <summary>
        /// Data source for a Redpanda Cloud cluster
        /// 
        /// 
        /// ## Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Redpanda = Pulumi.Redpanda;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Redpanda.GetCluster.Invoke(new()
        ///     {
        ///         Id = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Example Usage of a data source BYOC to manage users and ACLs
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Redpanda = Pulumi.Redpanda;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Get("clusterId") ?? "";
        ///     var testCluster = Redpanda.GetCluster.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        ///     var userPw = config.Get("userPw") ?? "password";
        ///     var mechanism = config.Get("mechanism") ?? "scram-sha-256";
        ///     var testUser = new Redpanda.User("testUser", new()
        ///     {
        ///         Password = userPw,
        ///         Mechanism = mechanism,
        ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
        ///     });
        /// 
        ///     var testAcl = new Redpanda.Acl("testAcl", new()
        ///     {
        ///         ResourceType = "CLUSTER",
        ///         ResourceName = "kafka-cluster",
        ///         ResourcePatternType = "LITERAL",
        ///         Principal = testUser.Name.Apply(name =&gt; $"User:{name}"),
        ///         Host = "*",
        ///         Operation = "ALTER",
        ///         PermissionType = "ALLOW",
        ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
        ///     });
        /// 
        ///     var userName = config.Get("userName") ?? "test-username";
        ///     var topicName = config.Get("topicName") ?? "test-topic";
        ///     var partitionCount = config.GetDouble("partitionCount") ?? 3;
        ///     var replicationFactor = config.GetDouble("replicationFactor") ?? 3;
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Limitations
        /// 
        /// Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("redpanda:index/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for a Redpanda Cloud cluster
        /// 
        /// 
        /// ## Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Redpanda = Pulumi.Redpanda;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Redpanda.GetCluster.Invoke(new()
        ///     {
        ///         Id = "cluster_id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Example Usage of a data source BYOC to manage users and ACLs
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Redpanda = Pulumi.Redpanda;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Get("clusterId") ?? "";
        ///     var testCluster = Redpanda.GetCluster.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        ///     var userPw = config.Get("userPw") ?? "password";
        ///     var mechanism = config.Get("mechanism") ?? "scram-sha-256";
        ///     var testUser = new Redpanda.User("testUser", new()
        ///     {
        ///         Password = userPw,
        ///         Mechanism = mechanism,
        ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
        ///     });
        /// 
        ///     var testAcl = new Redpanda.Acl("testAcl", new()
        ///     {
        ///         ResourceType = "CLUSTER",
        ///         ResourceName = "kafka-cluster",
        ///         ResourcePatternType = "LITERAL",
        ///         Principal = testUser.Name.Apply(name =&gt; $"User:{name}"),
        ///         Host = "*",
        ///         Operation = "ALTER",
        ///         PermissionType = "ALLOW",
        ///         ClusterApiUrl = testCluster.Apply(getClusterResult =&gt; getClusterResult.ClusterApiUrl),
        ///     });
        /// 
        ///     var userName = config.Get("userName") ?? "test-username";
        ///     var topicName = config.Get("topicName") ?? "test-topic";
        ///     var partitionCount = config.GetDouble("partitionCount") ?? 3;
        ///     var replicationFactor = config.GetDouble("replicationFactor") ?? 3;
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ## Limitations
        /// 
        /// Can only be used with Redpanda Cloud Dedicated and BYOC clusters.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("redpanda:index/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the cluster
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the cluster
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// allows deletion of the cluster. defaults to true. Not recommended for production use
        /// </summary>
        public readonly bool AllowDeletion;
        /// <summary>
        /// Must be one of aws or gcp
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// The URL of the cluster API
        /// </summary>
        public readonly string ClusterApiUrl;
        /// <summary>
        /// Type of the cluster
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// Connection type of the cluster
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// The id of the cluster
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the cluster
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The id of the namespace in which to create the cluster
        /// </summary>
        public readonly string NamespaceId;
        /// <summary>
        /// The id of the network in which to create the cluster
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// Version of Redpanda to deploy
        /// </summary>
        public readonly string RedpandaVersion;
        /// <summary>
        /// Cloud provider specific region of the cluster
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Tags to apply to the cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Throughput tier of the cluster
        /// </summary>
        public readonly string ThroughputTier;
        /// <summary>
        /// Cloud provider specific zones of the cluster
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetClusterResult(
            bool allowDeletion,

            string cloudProvider,

            string clusterApiUrl,

            string clusterType,

            string connectionType,

            string id,

            string name,

            string namespaceId,

            string networkId,

            string redpandaVersion,

            string region,

            ImmutableDictionary<string, string> tags,

            string throughputTier,

            ImmutableArray<string> zones)
        {
            AllowDeletion = allowDeletion;
            CloudProvider = cloudProvider;
            ClusterApiUrl = clusterApiUrl;
            ClusterType = clusterType;
            ConnectionType = connectionType;
            Id = id;
            Name = name;
            NamespaceId = namespaceId;
            NetworkId = networkId;
            RedpandaVersion = redpandaVersion;
            Region = region;
            Tags = tags;
            ThroughputTier = throughputTier;
            Zones = zones;
        }
    }
}
