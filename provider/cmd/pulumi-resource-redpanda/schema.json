{
    "name": "redpanda",
    "displayName": "Redpanda",
    "description": "A Pulumi package for creating and managing Redpanda cloud resources.",
    "keywords": [
        "pulumi",
        "redpanda",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`redpanda` Terraform Provider](https://github.com/redpanda-data/terraform-provider-redpanda).",
    "repository": "https://github.com/pulumiverse/pulumi-redpanda",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/redpanda/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/redpanda",
            "packageDescription": "A Pulumi package for creating and managing Redpanda cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/redpanda-data/terraform-provider-redpanda)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-redpanda` repo](https://github.com/pulumiverse/pulumi-redpanda/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-redpanda` repo](https://github.com/redpanda-data/terraform-provider-redpanda/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_redpanda",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/redpanda-data/terraform-provider-redpanda)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-redpanda` repo](https://github.com/pulumiverse/pulumi-redpanda/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-redpanda` repo](https://github.com/redpanda-data/terraform-provider-redpanda/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accessToken": {
                "type": "string",
                "description": "Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can\nalso be set with the `REDPANDA_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "azureClientId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or\nARM_CLIENT_ID\n"
            },
            "azureClientSecret": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET\nor ARM_CLIENT_SECRET\n"
            },
            "azureSubscriptionId": {
                "type": "string",
                "description": "The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified\non a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or\nARM_TENANT_ID\n"
            },
            "clientId": {
                "type": "string",
                "description": "The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_ID` environment variable.\n",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_SECRET` environment variable.\n",
                "secret": true
            },
            "gcpProjectId": {
                "type": "string",
                "description": "The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it\nwill take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following\nordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.\n"
            },
            "googleCredentials": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS\n"
            },
            "googleCredentialsBase64": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials\nintended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64\n"
            }
        }
    },
    "types": {
        "redpanda:index/ClusterAwsPrivateLink:ClusterAwsPrivateLink": {
            "properties": {
                "allowedPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).\n"
                },
                "connectConsole": {
                    "type": "boolean",
                    "description": "Whether Console is connected via PrivateLink.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether AWS PrivateLink is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/ClusterAwsPrivateLinkStatus:ClusterAwsPrivateLinkStatus",
                    "description": "Current status of the PrivateLink configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedPrincipals",
                "connectConsole",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedPrincipals",
                        "connectConsole",
                        "enabled",
                        "status"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAwsPrivateLinkStatus:ClusterAwsPrivateLinkStatus": {
            "properties": {
                "consolePort": {
                    "type": "integer",
                    "description": "Port for Redpanda Console.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the PrivateLink service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the PrivateLink service was deleted.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The PrivateLink service ID.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The PrivateLink service name.\n"
                },
                "serviceState": {
                    "type": "string",
                    "description": "Current state of the PrivateLink service.\n"
                },
                "vpcEndpointConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/ClusterAwsPrivateLinkStatusVpcEndpointConnection:ClusterAwsPrivateLinkStatusVpcEndpointConnection"
                    },
                    "description": "List of VPC endpoint connections.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consolePort",
                        "createdAt",
                        "deletedAt",
                        "kafkaApiNodeBasePort",
                        "kafkaApiSeedPort",
                        "redpandaProxyNodeBasePort",
                        "redpandaProxySeedPort",
                        "schemaRegistrySeedPort",
                        "serviceId",
                        "serviceName",
                        "serviceState",
                        "vpcEndpointConnections"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAwsPrivateLinkStatusVpcEndpointConnection:ClusterAwsPrivateLinkStatusVpcEndpointConnection": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "The connection ID.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the endpoint connection was created.\n"
                },
                "dnsEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry:ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry"
                    },
                    "description": "DNS entries for the endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The endpoint connection ID.\n"
                },
                "loadBalancerArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ARNs of associated load balancers.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the endpoint connection.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the endpoint connection.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectionId",
                        "createdAt",
                        "dnsEntries",
                        "id",
                        "loadBalancerArns",
                        "owner",
                        "state"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry:ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry": {
            "properties": {
                "dnsName": {
                    "type": "string",
                    "description": "The DNS name.\n"
                },
                "hostedZoneId": {
                    "type": "string",
                    "description": "The hosted zone ID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsName",
                        "hostedZoneId"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAzurePrivateLink:ClusterAzurePrivateLink": {
            "properties": {
                "allowedSubscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).\n"
                },
                "connectConsole": {
                    "type": "boolean",
                    "description": "Whether Console is connected in Redpanda Azure Private Link Service.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Redpanda Azure Private Link Endpoint Service is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/ClusterAzurePrivateLinkStatus:ClusterAzurePrivateLinkStatus",
                    "description": "Current status of the Private Link configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedSubscriptions",
                "connectConsole",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedSubscriptions",
                        "connectConsole",
                        "enabled",
                        "status"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAzurePrivateLinkStatus:ClusterAzurePrivateLinkStatus": {
            "properties": {
                "approvedSubscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of approved Azure subscription IDs.\n"
                },
                "consolePort": {
                    "type": "integer",
                    "description": "Port for Redpanda Console.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the Private Link service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the Private Link service was deleted.\n"
                },
                "dnsARecord": {
                    "type": "string",
                    "description": "DNS A record for the service.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "privateEndpointConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/ClusterAzurePrivateLinkStatusPrivateEndpointConnection:ClusterAzurePrivateLinkStatusPrivateEndpointConnection"
                    },
                    "description": "List of private endpoint connections.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The Private Link service ID.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The Private Link service name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "approvedSubscriptions",
                        "consolePort",
                        "createdAt",
                        "deletedAt",
                        "dnsARecord",
                        "kafkaApiNodeBasePort",
                        "kafkaApiSeedPort",
                        "privateEndpointConnections",
                        "redpandaProxyNodeBasePort",
                        "redpandaProxySeedPort",
                        "schemaRegistrySeedPort",
                        "serviceId",
                        "serviceName"
                    ]
                }
            }
        },
        "redpanda:index/ClusterAzurePrivateLinkStatusPrivateEndpointConnection:ClusterAzurePrivateLinkStatusPrivateEndpointConnection": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the endpoint connection was created.\n"
                },
                "privateEndpointId": {
                    "type": "string",
                    "description": "ID of the private endpoint.\n"
                },
                "privateEndpointName": {
                    "type": "string",
                    "description": "Name of the private endpoint.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the endpoint connection.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectionId",
                        "connectionName",
                        "createdAt",
                        "privateEndpointId",
                        "privateEndpointName",
                        "status"
                    ]
                }
            }
        },
        "redpanda:index/ClusterCustomerManagedResources:ClusterCustomerManagedResources": {
            "properties": {
                "aws": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAws:ClusterCustomerManagedResourcesAws"
                },
                "gcp": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcp:ClusterCustomerManagedResourcesGcp"
                }
            },
            "type": "object"
        },
        "redpanda:index/ClusterCustomerManagedResourcesAws:ClusterCustomerManagedResourcesAws": {
            "properties": {
                "agentInstanceProfile": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsAgentInstanceProfile:ClusterCustomerManagedResourcesAwsAgentInstanceProfile"
                },
                "cloudStorageBucket": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsCloudStorageBucket:ClusterCustomerManagedResourcesAwsCloudStorageBucket"
                },
                "clusterSecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsClusterSecurityGroup:ClusterCustomerManagedResourcesAwsClusterSecurityGroup"
                },
                "connectorsNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile"
                },
                "connectorsSecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup:ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup"
                },
                "k8sClusterRole": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsK8sClusterRole:ClusterCustomerManagedResourcesAwsK8sClusterRole"
                },
                "nodeSecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsNodeSecurityGroup:ClusterCustomerManagedResourcesAwsNodeSecurityGroup"
                },
                "permissionsBoundaryPolicy": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy:ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy"
                },
                "redpandaAgentSecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup:ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup"
                },
                "redpandaNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile"
                },
                "redpandaNodeGroupSecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup:ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup"
                },
                "utilityNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile"
                },
                "utilitySecurityGroup": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesAwsUtilitySecurityGroup:ClusterCustomerManagedResourcesAwsUtilitySecurityGroup"
                }
            },
            "type": "object",
            "required": [
                "agentInstanceProfile",
                "cloudStorageBucket",
                "clusterSecurityGroup",
                "connectorsNodeGroupInstanceProfile",
                "connectorsSecurityGroup",
                "k8sClusterRole",
                "nodeSecurityGroup",
                "permissionsBoundaryPolicy",
                "redpandaAgentSecurityGroup",
                "redpandaNodeGroupInstanceProfile",
                "redpandaNodeGroupSecurityGroup",
                "utilityNodeGroupInstanceProfile",
                "utilitySecurityGroup"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsAgentInstanceProfile:ClusterCustomerManagedResourcesAwsAgentInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the agent instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsCloudStorageBucket:ClusterCustomerManagedResourcesAwsCloudStorageBucket": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the cloud storage bucket\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsClusterSecurityGroup:ClusterCustomerManagedResourcesAwsClusterSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the cluster security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the connectors node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup:ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the connectors security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsK8sClusterRole:ClusterCustomerManagedResourcesAwsK8sClusterRole": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the Kubernetes cluster role\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsNodeSecurityGroup:ClusterCustomerManagedResourcesAwsNodeSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the node security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy:ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the permissions boundary policy\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup:ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda agent security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup:ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda node group security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile:ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the utility node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesAwsUtilitySecurityGroup:ClusterCustomerManagedResourcesAwsUtilitySecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the utility security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcp:ClusterCustomerManagedResourcesGcp": {
            "properties": {
                "agentServiceAccount": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpAgentServiceAccount:ClusterCustomerManagedResourcesGcpAgentServiceAccount",
                    "description": "GCP service account for the agent.\n"
                },
                "connectorServiceAccount": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpConnectorServiceAccount:ClusterCustomerManagedResourcesGcpConnectorServiceAccount",
                    "description": "GCP service account for managed connectors.\n"
                },
                "consoleServiceAccount": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpConsoleServiceAccount:ClusterCustomerManagedResourcesGcpConsoleServiceAccount",
                    "description": "GCP service account for Redpanda Console.\n"
                },
                "gkeServiceAccount": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpGkeServiceAccount:ClusterCustomerManagedResourcesGcpGkeServiceAccount",
                    "description": "GCP service account for GCP Kubernetes Engine (GKE).\n"
                },
                "pscNatSubnetName": {
                    "type": "string",
                    "description": "NAT subnet name if GCP Private Service Connect is enabled.\n"
                },
                "redpandaClusterServiceAccount": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount:ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount",
                    "description": "GCP service account for the Redpanda cluster.\n"
                },
                "subnet": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpSubnet:ClusterCustomerManagedResourcesGcpSubnet",
                    "description": "GCP subnet where Redpanda cluster is deployed.\n"
                },
                "tieredStorageBucket": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpTieredStorageBucket:ClusterCustomerManagedResourcesGcpTieredStorageBucket",
                    "description": "GCP storage bucket for Tiered storage.\n"
                }
            },
            "type": "object",
            "required": [
                "agentServiceAccount",
                "connectorServiceAccount",
                "consoleServiceAccount",
                "gkeServiceAccount",
                "redpandaClusterServiceAccount",
                "subnet",
                "tieredStorageBucket"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpAgentServiceAccount:ClusterCustomerManagedResourcesGcpAgentServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpConnectorServiceAccount:ClusterCustomerManagedResourcesGcpConnectorServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpConsoleServiceAccount:ClusterCustomerManagedResourcesGcpConsoleServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpGkeServiceAccount:ClusterCustomerManagedResourcesGcpGkeServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount:ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpSubnet:ClusterCustomerManagedResourcesGcpSubnet": {
            "properties": {
                "k8sMasterIpv4Range": {
                    "type": "string",
                    "description": "Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Subnet name.\n"
                },
                "secondaryIpv4RangePods": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods:ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods",
                    "description": "Secondary IPv4 range for pods.\n"
                },
                "secondaryIpv4RangeServices": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices:ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices",
                    "description": "Secondary IPv4 range for services.\n"
                }
            },
            "type": "object",
            "required": [
                "k8sMasterIpv4Range",
                "name",
                "secondaryIpv4RangePods",
                "secondaryIpv4RangeServices"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods:ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secondary IPv4 range name for pods.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices:ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secondary IPv4 range name for services.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "redpanda:index/ClusterCustomerManagedResourcesGcpTieredStorageBucket:ClusterCustomerManagedResourcesGcpTieredStorageBucket": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "GCP storage bucket name.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "redpanda:index/ClusterGcpPrivateServiceConnect:ClusterGcpPrivateServiceConnect": {
            "properties": {
                "consumerAcceptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnectConsumerAcceptList:ClusterGcpPrivateServiceConnectConsumerAcceptList"
                    },
                    "description": "List of consumers that are allowed to connect to Redpanda GCP PSC (Private Service Connect) service attachment.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Redpanda GCP Private Service Connect is enabled.\n"
                },
                "globalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether global access is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnectStatus:ClusterGcpPrivateServiceConnectStatus",
                    "description": "Current status of the Private Service Connect configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "consumerAcceptLists",
                "enabled",
                "globalAccessEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consumerAcceptLists",
                        "enabled",
                        "globalAccessEnabled",
                        "status"
                    ]
                }
            }
        },
        "redpanda:index/ClusterGcpPrivateServiceConnectConsumerAcceptList:ClusterGcpPrivateServiceConnectConsumerAcceptList": {
            "properties": {
                "source": {
                    "type": "string",
                    "description": "Either the GCP project number or its alphanumeric ID.\n"
                }
            },
            "type": "object",
            "required": [
                "source"
            ]
        },
        "redpanda:index/ClusterGcpPrivateServiceConnectStatus:ClusterGcpPrivateServiceConnectStatus": {
            "properties": {
                "connectedEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnectStatusConnectedEndpoint:ClusterGcpPrivateServiceConnectStatusConnectedEndpoint"
                    },
                    "description": "List of connected endpoints.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the Private Service Connect service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the Private Service Connect service was deleted.\n"
                },
                "dnsARecords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS A records for the service.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "seedHostname": {
                    "type": "string",
                    "description": "Hostname for the seed brokers.\n"
                },
                "serviceAttachment": {
                    "type": "string",
                    "description": "The service attachment identifier.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectedEndpoints",
                        "createdAt",
                        "deletedAt",
                        "dnsARecords",
                        "kafkaApiNodeBasePort",
                        "kafkaApiSeedPort",
                        "redpandaProxyNodeBasePort",
                        "redpandaProxySeedPort",
                        "schemaRegistrySeedPort",
                        "seedHostname",
                        "serviceAttachment"
                    ]
                }
            }
        },
        "redpanda:index/ClusterGcpPrivateServiceConnectStatusConnectedEndpoint:ClusterGcpPrivateServiceConnectStatusConnectedEndpoint": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "The connection ID.\n"
                },
                "consumerNetwork": {
                    "type": "string",
                    "description": "The consumer network.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint address.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the endpoint connection.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectionId",
                        "consumerNetwork",
                        "endpoint",
                        "status"
                    ]
                }
            }
        },
        "redpanda:index/ClusterHttpProxy:ClusterHttpProxy": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/ClusterHttpProxyMtls:ClusterHttpProxyMtls",
                    "description": "mTLS configuration.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP Proxy URL.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "mtls",
                        "url"
                    ]
                }
            }
        },
        "redpanda:index/ClusterHttpProxyMtls:ClusterHttpProxyMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "redpanda:index/ClusterKafkaApi:ClusterKafkaApi": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/ClusterKafkaApiMtls:ClusterKafkaApiMtls",
                    "description": "mTLS configuration.\n"
                },
                "seedBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kafka broker addresses.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "mtls",
                        "seedBrokers"
                    ]
                }
            }
        },
        "redpanda:index/ClusterKafkaApiMtls:ClusterKafkaApiMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "redpanda:index/ClusterKafkaConnect:ClusterKafkaConnect": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Kafka Connect is enabled.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "redpanda:index/ClusterMaintenanceWindowConfig:ClusterMaintenanceWindowConfig": {
            "properties": {
                "anytime": {
                    "type": "boolean",
                    "description": "If true, maintenance can occur at any time.\n"
                },
                "dayHour": {
                    "$ref": "#/types/redpanda:index/ClusterMaintenanceWindowConfigDayHour:ClusterMaintenanceWindowConfigDayHour"
                },
                "unspecified": {
                    "type": "boolean",
                    "description": "If true, maintenance window is unspecified.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "unspecified"
                    ]
                }
            }
        },
        "redpanda:index/ClusterMaintenanceWindowConfigDayHour:ClusterMaintenanceWindowConfigDayHour": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of week.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "Hour of day.\n"
                }
            },
            "type": "object"
        },
        "redpanda:index/ClusterPrometheus:ClusterPrometheus": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The Prometheus metrics endpoint URL.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "redpanda:index/ClusterRedpandaConsole:ClusterRedpandaConsole": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The Redpanda Console URL.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "redpanda:index/ClusterSchemaRegistry:ClusterSchemaRegistry": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/ClusterSchemaRegistryMtls:ClusterSchemaRegistryMtls",
                    "description": "mTLS configuration.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Schema Registry URL.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "redpanda:index/ClusterSchemaRegistryMtls:ClusterSchemaRegistryMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "redpanda:index/ClusterStateDescription:ClusterStateDescription": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "Error code if cluster is in error state.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Detailed error message if cluster is in error state.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "code",
                        "message"
                    ]
                }
            }
        },
        "redpanda:index/NetworkCustomerManagedResources:NetworkCustomerManagedResources": {
            "properties": {
                "aws": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesAws:NetworkCustomerManagedResourcesAws"
                },
                "gcp": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesGcp:NetworkCustomerManagedResourcesGcp"
                }
            },
            "type": "object"
        },
        "redpanda:index/NetworkCustomerManagedResourcesAws:NetworkCustomerManagedResourcesAws": {
            "properties": {
                "dynamodbTable": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesAwsDynamodbTable:NetworkCustomerManagedResourcesAwsDynamodbTable"
                },
                "managementBucket": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesAwsManagementBucket:NetworkCustomerManagedResourcesAwsManagementBucket"
                },
                "privateSubnets": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesAwsPrivateSubnets:NetworkCustomerManagedResourcesAwsPrivateSubnets"
                },
                "vpc": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesAwsVpc:NetworkCustomerManagedResourcesAwsVpc"
                }
            },
            "type": "object",
            "required": [
                "dynamodbTable",
                "managementBucket",
                "privateSubnets",
                "vpc"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesAwsDynamodbTable:NetworkCustomerManagedResourcesAwsDynamodbTable": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS DynamoDB table identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesAwsManagementBucket:NetworkCustomerManagedResourcesAwsManagementBucket": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS storage bucket identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesAwsPrivateSubnets:NetworkCustomerManagedResourcesAwsPrivateSubnets": {
            "properties": {
                "arns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS private subnet identifiers\n"
                }
            },
            "type": "object",
            "required": [
                "arns"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesAwsVpc:NetworkCustomerManagedResourcesAwsVpc": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS VPC identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesGcp:NetworkCustomerManagedResourcesGcp": {
            "properties": {
                "managementBucket": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResourcesGcpManagementBucket:NetworkCustomerManagedResourcesGcpManagementBucket"
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of user-created network where the Redpanda cluster is deployed\n"
                },
                "networkProjectId": {
                    "type": "string",
                    "description": "GCP project ID where the network is created\n"
                }
            },
            "type": "object",
            "required": [
                "managementBucket",
                "networkName",
                "networkProjectId"
            ]
        },
        "redpanda:index/NetworkCustomerManagedResourcesGcpManagementBucket:NetworkCustomerManagedResourcesGcpManagementBucket": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "GCP storage bucket name for storing the state of Redpanda cluster deployment\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "redpanda:index/getClusterAwsPrivateLink:getClusterAwsPrivateLink": {
            "properties": {
                "allowedPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service.\n"
                },
                "connectConsole": {
                    "type": "boolean",
                    "description": "Whether Console is connected via PrivateLink.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether AWS PrivateLink is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/getClusterAwsPrivateLinkStatus:getClusterAwsPrivateLinkStatus",
                    "description": "Current status of the PrivateLink configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedPrincipals",
                "connectConsole",
                "enabled",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAwsPrivateLinkStatus:getClusterAwsPrivateLinkStatus": {
            "properties": {
                "consolePort": {
                    "type": "integer",
                    "description": "Port for Redpanda Console.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the PrivateLink service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the PrivateLink service was deleted.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The PrivateLink service ID.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The PrivateLink service name.\n"
                },
                "serviceState": {
                    "type": "string",
                    "description": "Current state of the PrivateLink service.\n"
                },
                "vpcEndpointConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/getClusterAwsPrivateLinkStatusVpcEndpointConnection:getClusterAwsPrivateLinkStatusVpcEndpointConnection"
                    },
                    "description": "List of VPC endpoint connections.\n"
                }
            },
            "type": "object",
            "required": [
                "consolePort",
                "createdAt",
                "deletedAt",
                "kafkaApiNodeBasePort",
                "kafkaApiSeedPort",
                "redpandaProxyNodeBasePort",
                "redpandaProxySeedPort",
                "schemaRegistrySeedPort",
                "serviceId",
                "serviceName",
                "serviceState",
                "vpcEndpointConnections"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAwsPrivateLinkStatusVpcEndpointConnection:getClusterAwsPrivateLinkStatusVpcEndpointConnection": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "The connection ID.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the endpoint connection was created.\n"
                },
                "dnsEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/getClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry:getClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry"
                    },
                    "description": "DNS entries for the endpoint.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The endpoint connection ID.\n"
                },
                "loadBalancerArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ARNs of associated load balancers.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the endpoint connection.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the endpoint connection.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionId",
                "createdAt",
                "dnsEntries",
                "id",
                "loadBalancerArns",
                "owner",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry:getClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry": {
            "properties": {
                "dnsName": {
                    "type": "string",
                    "description": "The DNS name.\n"
                },
                "hostedZoneId": {
                    "type": "string",
                    "description": "The hosted zone ID.\n"
                }
            },
            "type": "object",
            "required": [
                "dnsName",
                "hostedZoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAzurePrivateLink:getClusterAzurePrivateLink": {
            "properties": {
                "allowedSubscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service.\n"
                },
                "connectConsole": {
                    "type": "boolean",
                    "description": "Whether Console is connected in Redpanda Azure Private Link Service.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Redpanda Azure Private Link Endpoint Service is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/getClusterAzurePrivateLinkStatus:getClusterAzurePrivateLinkStatus",
                    "description": "Current status of the Private Link configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedSubscriptions",
                "connectConsole",
                "enabled",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAzurePrivateLinkStatus:getClusterAzurePrivateLinkStatus": {
            "properties": {
                "approvedSubscriptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of approved Azure subscription IDs.\n"
                },
                "consolePort": {
                    "type": "integer",
                    "description": "Port for Redpanda Console.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the Private Link service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the Private Link service was deleted.\n"
                },
                "dnsARecord": {
                    "type": "string",
                    "description": "DNS A record for the service.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "privateEndpointConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/getClusterAzurePrivateLinkStatusPrivateEndpointConnection:getClusterAzurePrivateLinkStatusPrivateEndpointConnection"
                    },
                    "description": "List of private endpoint connections.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The Private Link service ID.\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The Private Link service name.\n"
                }
            },
            "type": "object",
            "required": [
                "approvedSubscriptions",
                "consolePort",
                "createdAt",
                "deletedAt",
                "dnsARecord",
                "kafkaApiNodeBasePort",
                "kafkaApiSeedPort",
                "privateEndpointConnections",
                "redpandaProxyNodeBasePort",
                "redpandaProxySeedPort",
                "schemaRegistrySeedPort",
                "serviceId",
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterAzurePrivateLinkStatusPrivateEndpointConnection:getClusterAzurePrivateLinkStatusPrivateEndpointConnection": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "ID of the connection.\n"
                },
                "connectionName": {
                    "type": "string",
                    "description": "Name of the connection.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the endpoint connection was created.\n"
                },
                "privateEndpointId": {
                    "type": "string",
                    "description": "ID of the private endpoint.\n"
                },
                "privateEndpointName": {
                    "type": "string",
                    "description": "Name of the private endpoint.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the endpoint connection.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionId",
                "connectionName",
                "createdAt",
                "privateEndpointId",
                "privateEndpointName",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResources:getClusterCustomerManagedResources": {
            "properties": {
                "aws": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAws:getClusterCustomerManagedResourcesAws"
                },
                "gcp": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcp:getClusterCustomerManagedResourcesGcp"
                }
            },
            "type": "object",
            "required": [
                "aws",
                "gcp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAws:getClusterCustomerManagedResourcesAws": {
            "properties": {
                "agentInstanceProfile": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsAgentInstanceProfile:getClusterCustomerManagedResourcesAwsAgentInstanceProfile"
                },
                "cloudStorageBucket": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsCloudStorageBucket:getClusterCustomerManagedResourcesAwsCloudStorageBucket"
                },
                "clusterSecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsClusterSecurityGroup:getClusterCustomerManagedResourcesAwsClusterSecurityGroup"
                },
                "connectorsNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile"
                },
                "connectorsSecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsConnectorsSecurityGroup:getClusterCustomerManagedResourcesAwsConnectorsSecurityGroup"
                },
                "k8sClusterRole": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsK8sClusterRole:getClusterCustomerManagedResourcesAwsK8sClusterRole"
                },
                "nodeSecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsNodeSecurityGroup:getClusterCustomerManagedResourcesAwsNodeSecurityGroup"
                },
                "permissionsBoundaryPolicy": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy:getClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy"
                },
                "redpandaAgentSecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup:getClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup"
                },
                "redpandaNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile"
                },
                "redpandaNodeGroupSecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup:getClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup"
                },
                "utilityNodeGroupInstanceProfile": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile"
                },
                "utilitySecurityGroup": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesAwsUtilitySecurityGroup:getClusterCustomerManagedResourcesAwsUtilitySecurityGroup"
                }
            },
            "type": "object",
            "required": [
                "agentInstanceProfile",
                "cloudStorageBucket",
                "clusterSecurityGroup",
                "connectorsNodeGroupInstanceProfile",
                "connectorsSecurityGroup",
                "k8sClusterRole",
                "nodeSecurityGroup",
                "permissionsBoundaryPolicy",
                "redpandaAgentSecurityGroup",
                "redpandaNodeGroupInstanceProfile",
                "redpandaNodeGroupSecurityGroup",
                "utilityNodeGroupInstanceProfile",
                "utilitySecurityGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsAgentInstanceProfile:getClusterCustomerManagedResourcesAwsAgentInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the agent instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsCloudStorageBucket:getClusterCustomerManagedResourcesAwsCloudStorageBucket": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the cloud storage bucket\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsClusterSecurityGroup:getClusterCustomerManagedResourcesAwsClusterSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the cluster security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the connectors node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsConnectorsSecurityGroup:getClusterCustomerManagedResourcesAwsConnectorsSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the connectors security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsK8sClusterRole:getClusterCustomerManagedResourcesAwsK8sClusterRole": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the Kubernetes cluster role\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsNodeSecurityGroup:getClusterCustomerManagedResourcesAwsNodeSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the node security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy:getClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the permissions boundary policy\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup:getClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda agent security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup:getClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the redpanda node group security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile:getClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the utility node group instance profile\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesAwsUtilitySecurityGroup:getClusterCustomerManagedResourcesAwsUtilitySecurityGroup": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "ARN for the utility security group\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcp:getClusterCustomerManagedResourcesGcp": {
            "properties": {
                "agentServiceAccount": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpAgentServiceAccount:getClusterCustomerManagedResourcesGcpAgentServiceAccount",
                    "description": "GCP service account for the agent.\n"
                },
                "connectorServiceAccount": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpConnectorServiceAccount:getClusterCustomerManagedResourcesGcpConnectorServiceAccount",
                    "description": "GCP service account for managed connectors.\n"
                },
                "consoleServiceAccount": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpConsoleServiceAccount:getClusterCustomerManagedResourcesGcpConsoleServiceAccount",
                    "description": "GCP service account for Redpanda Console.\n"
                },
                "gkeServiceAccount": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpGkeServiceAccount:getClusterCustomerManagedResourcesGcpGkeServiceAccount",
                    "description": "GCP service account for GCP Kubernetes Engine (GKE).\n"
                },
                "pscNatSubnetName": {
                    "type": "string",
                    "description": "NAT subnet name if GCP Private Service Connect is enabled.\n"
                },
                "redpandaClusterServiceAccount": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount:getClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount",
                    "description": "GCP service account for the Redpanda cluster.\n"
                },
                "subnet": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpSubnet:getClusterCustomerManagedResourcesGcpSubnet",
                    "description": "GCP subnet where Redpanda cluster is deployed.\n"
                },
                "tieredStorageBucket": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpTieredStorageBucket:getClusterCustomerManagedResourcesGcpTieredStorageBucket",
                    "description": "GCP storage bucket for Tiered storage.\n"
                }
            },
            "type": "object",
            "required": [
                "agentServiceAccount",
                "connectorServiceAccount",
                "consoleServiceAccount",
                "gkeServiceAccount",
                "pscNatSubnetName",
                "redpandaClusterServiceAccount",
                "subnet",
                "tieredStorageBucket"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpAgentServiceAccount:getClusterCustomerManagedResourcesGcpAgentServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpConnectorServiceAccount:getClusterCustomerManagedResourcesGcpConnectorServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpConsoleServiceAccount:getClusterCustomerManagedResourcesGcpConsoleServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpGkeServiceAccount:getClusterCustomerManagedResourcesGcpGkeServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount:getClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "GCP service account email.\n"
                }
            },
            "type": "object",
            "required": [
                "email"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpSubnet:getClusterCustomerManagedResourcesGcpSubnet": {
            "properties": {
                "k8sMasterIpv4Range": {
                    "type": "string",
                    "description": "Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Subnet name.\n"
                },
                "secondaryIpv4RangePods": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods:getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods",
                    "description": "Secondary IPv4 range for pods.\n"
                },
                "secondaryIpv4RangeServices": {
                    "$ref": "#/types/redpanda:index/getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices:getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices",
                    "description": "Secondary IPv4 range for services.\n"
                }
            },
            "type": "object",
            "required": [
                "k8sMasterIpv4Range",
                "name",
                "secondaryIpv4RangePods",
                "secondaryIpv4RangeServices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods:getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secondary IPv4 range name for pods.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices:getClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Secondary IPv4 range name for services.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterCustomerManagedResourcesGcpTieredStorageBucket:getClusterCustomerManagedResourcesGcpTieredStorageBucket": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "GCP storage bucket name.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterGcpPrivateServiceConnect:getClusterGcpPrivateServiceConnect": {
            "properties": {
                "consumerAcceptLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/getClusterGcpPrivateServiceConnectConsumerAcceptList:getClusterGcpPrivateServiceConnectConsumerAcceptList"
                    },
                    "description": "List of consumers that are allowed to connect to Redpanda GCP PSC service attachment.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Redpanda GCP Private Service Connect is enabled.\n"
                },
                "globalAccessEnabled": {
                    "type": "boolean",
                    "description": "Whether global access is enabled.\n"
                },
                "status": {
                    "$ref": "#/types/redpanda:index/getClusterGcpPrivateServiceConnectStatus:getClusterGcpPrivateServiceConnectStatus",
                    "description": "Current status of the Private Service Connect configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "consumerAcceptLists",
                "enabled",
                "globalAccessEnabled",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterGcpPrivateServiceConnectConsumerAcceptList:getClusterGcpPrivateServiceConnectConsumerAcceptList": {
            "properties": {
                "source": {
                    "type": "string",
                    "description": "Either the GCP project number or its alphanumeric ID.\n"
                }
            },
            "type": "object",
            "required": [
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterGcpPrivateServiceConnectStatus:getClusterGcpPrivateServiceConnectStatus": {
            "properties": {
                "connectedEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/redpanda:index/getClusterGcpPrivateServiceConnectStatusConnectedEndpoint:getClusterGcpPrivateServiceConnectStatusConnectedEndpoint"
                    },
                    "description": "List of connected endpoints.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "When the Private Service Connect service was created.\n"
                },
                "deletedAt": {
                    "type": "string",
                    "description": "When the Private Service Connect service was deleted.\n"
                },
                "dnsARecords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS A records for the service.\n"
                },
                "kafkaApiNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for Kafka API nodes.\n"
                },
                "kafkaApiSeedPort": {
                    "type": "integer",
                    "description": "Port for Kafka API seed brokers.\n"
                },
                "redpandaProxyNodeBasePort": {
                    "type": "integer",
                    "description": "Base port for HTTP proxy nodes.\n"
                },
                "redpandaProxySeedPort": {
                    "type": "integer",
                    "description": "Port for HTTP proxy.\n"
                },
                "schemaRegistrySeedPort": {
                    "type": "integer",
                    "description": "Port for Schema Registry.\n"
                },
                "seedHostname": {
                    "type": "string",
                    "description": "Hostname for the seed brokers.\n"
                },
                "serviceAttachment": {
                    "type": "string",
                    "description": "The service attachment identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "connectedEndpoints",
                "createdAt",
                "deletedAt",
                "dnsARecords",
                "kafkaApiNodeBasePort",
                "kafkaApiSeedPort",
                "redpandaProxyNodeBasePort",
                "redpandaProxySeedPort",
                "schemaRegistrySeedPort",
                "seedHostname",
                "serviceAttachment"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterGcpPrivateServiceConnectStatusConnectedEndpoint:getClusterGcpPrivateServiceConnectStatusConnectedEndpoint": {
            "properties": {
                "connectionId": {
                    "type": "string",
                    "description": "The connection ID.\n"
                },
                "consumerNetwork": {
                    "type": "string",
                    "description": "The consumer network.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint address.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the endpoint connection.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionId",
                "consumerNetwork",
                "endpoint",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterHttpProxy:getClusterHttpProxy": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/getClusterHttpProxyMtls:getClusterHttpProxyMtls",
                    "description": "mTLS configuration.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP Proxy URL.\n"
                }
            },
            "type": "object",
            "required": [
                "mtls",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterHttpProxyMtls:getClusterHttpProxyMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "caCertificatesPems",
                "enabled",
                "principalMappingRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterKafkaApi:getClusterKafkaApi": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/getClusterKafkaApiMtls:getClusterKafkaApiMtls",
                    "description": "mTLS configuration.\n"
                },
                "seedBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kafka broker addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "mtls",
                "seedBrokers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterKafkaApiMtls:getClusterKafkaApiMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "caCertificatesPems",
                "enabled",
                "principalMappingRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterKafkaConnect:getClusterKafkaConnect": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether Kafka Connect is enabled.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterMaintenanceWindowConfig:getClusterMaintenanceWindowConfig": {
            "properties": {
                "anytime": {
                    "type": "boolean",
                    "description": "If true, maintenance can occur at any time.\n"
                },
                "dayHour": {
                    "$ref": "#/types/redpanda:index/getClusterMaintenanceWindowConfigDayHour:getClusterMaintenanceWindowConfigDayHour"
                },
                "unspecified": {
                    "type": "boolean",
                    "description": "If true, maintenance window is unspecified.\n"
                }
            },
            "type": "object",
            "required": [
                "anytime",
                "dayHour",
                "unspecified"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterMaintenanceWindowConfigDayHour:getClusterMaintenanceWindowConfigDayHour": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of week.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "Hour of day.\n"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "hourOfDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterPrometheus:getClusterPrometheus": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The Prometheus metrics endpoint URL.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterRedpandaConsole:getClusterRedpandaConsole": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The Redpanda Console URL.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterSchemaRegistry:getClusterSchemaRegistry": {
            "properties": {
                "mtls": {
                    "$ref": "#/types/redpanda:index/getClusterSchemaRegistryMtls:getClusterSchemaRegistryMtls",
                    "description": "mTLS configuration.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Schema Registry URL.\n"
                }
            },
            "type": "object",
            "required": [
                "mtls",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterSchemaRegistryMtls:getClusterSchemaRegistryMtls": {
            "properties": {
                "caCertificatesPems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CA certificate in PEM format.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether mTLS is enabled.\n"
                },
                "principalMappingRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principal mapping rules for mTLS authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "caCertificatesPems",
                "enabled",
                "principalMappingRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getClusterStateDescription:getClusterStateDescription": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "Error code if cluster is in error state.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Detailed error message if cluster is in error state.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResources:getNetworkCustomerManagedResources": {
            "properties": {
                "aws": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesAws:getNetworkCustomerManagedResourcesAws"
                },
                "gcp": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesGcp:getNetworkCustomerManagedResourcesGcp"
                }
            },
            "type": "object",
            "required": [
                "aws",
                "gcp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesAws:getNetworkCustomerManagedResourcesAws": {
            "properties": {
                "dynamodbTable": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesAwsDynamodbTable:getNetworkCustomerManagedResourcesAwsDynamodbTable"
                },
                "managementBucket": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesAwsManagementBucket:getNetworkCustomerManagedResourcesAwsManagementBucket"
                },
                "privateSubnets": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesAwsPrivateSubnets:getNetworkCustomerManagedResourcesAwsPrivateSubnets"
                },
                "vpc": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesAwsVpc:getNetworkCustomerManagedResourcesAwsVpc"
                }
            },
            "type": "object",
            "required": [
                "dynamodbTable",
                "managementBucket",
                "privateSubnets",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesAwsDynamodbTable:getNetworkCustomerManagedResourcesAwsDynamodbTable": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS DynamoDB table identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesAwsManagementBucket:getNetworkCustomerManagedResourcesAwsManagementBucket": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS storage bucket identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesAwsPrivateSubnets:getNetworkCustomerManagedResourcesAwsPrivateSubnets": {
            "properties": {
                "arns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS private subnet identifiers\n"
                }
            },
            "type": "object",
            "required": [
                "arns"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesAwsVpc:getNetworkCustomerManagedResourcesAwsVpc": {
            "properties": {
                "arn": {
                    "type": "string",
                    "description": "AWS VPC identifier\n"
                }
            },
            "type": "object",
            "required": [
                "arn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesGcp:getNetworkCustomerManagedResourcesGcp": {
            "properties": {
                "managementBucket": {
                    "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResourcesGcpManagementBucket:getNetworkCustomerManagedResourcesGcpManagementBucket"
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of user-created network where the Redpanda cluster is deployed\n"
                },
                "networkProjectId": {
                    "type": "string",
                    "description": "GCP project ID where the network is created\n"
                }
            },
            "type": "object",
            "required": [
                "managementBucket",
                "networkName",
                "networkProjectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getNetworkCustomerManagedResourcesGcpManagementBucket:getNetworkCustomerManagedResourcesGcpManagementBucket": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "GCP storage bucket name for storing the state of Redpanda cluster deployment\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getRegionsRegion:getRegionsRegion": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the region\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zones available in the region\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getServerlessRegionsServerlessRegion:getServerlessRegionsServerlessRegion": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider where the serverless regions exist\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the serverless region\n"
                },
                "placement": {
                    "$ref": "#/types/redpanda:index/getServerlessRegionsServerlessRegionPlacement:getServerlessRegionsServerlessRegionPlacement"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone of the serverless region\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "name",
                "placement",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getServerlessRegionsServerlessRegionPlacement:getServerlessRegionsServerlessRegionPlacement": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Region available\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "redpanda:index/getThroughputTiersThroughputTier:getThroughputTiersThroughputTier": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider where the Throughput Tier is available\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the Throughput Tier\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name of the Throughput Tier\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "displayName",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the redpanda package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessToken": {
                "type": "string",
                "description": "Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can\nalso be set with the `REDPANDA_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "azureClientId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or\nARM_CLIENT_ID\n"
            },
            "azureClientSecret": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET\nor ARM_CLIENT_SECRET\n"
            },
            "azureSubscriptionId": {
                "type": "string",
                "description": "The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified\non a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or\nARM_TENANT_ID\n"
            },
            "clientId": {
                "type": "string",
                "description": "The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_ID` environment variable.\n",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_SECRET` environment variable.\n",
                "secret": true
            },
            "gcpProjectId": {
                "type": "string",
                "description": "The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it\nwill take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following\nordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.\n"
            },
            "googleCredentials": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS\n"
            },
            "googleCredentialsBase64": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials\nintended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64\n"
            }
        },
        "inputProperties": {
            "accessToken": {
                "type": "string",
                "description": "Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can\nalso be set with the `REDPANDA_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "azureClientId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or\nARM_CLIENT_ID\n"
            },
            "azureClientSecret": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET\nor ARM_CLIENT_SECRET\n"
            },
            "azureSubscriptionId": {
                "type": "string",
                "description": "The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified\non a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.\n"
            },
            "azureTenantId": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or\nARM_TENANT_ID\n"
            },
            "clientId": {
                "type": "string",
                "description": "The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_ID` environment variable.\n",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can\nalso be set with the `REDPANDA_CLIENT_SECRET` environment variable.\n",
                "secret": true
            },
            "gcpProjectId": {
                "type": "string",
                "description": "The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it\nwill take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following\nordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.\n"
            },
            "googleCredentials": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS\n"
            },
            "googleCredentialsBase64": {
                "type": "string",
                "description": "Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials\nintended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64\n"
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:redpanda/terraformConfig"
        }
    },
    "resources": {
        "redpanda:index/acl:Acl": {
            "description": "Creates an Access Control List (ACL) in a Redpanda cluster.\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-2\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"use2-az1\",\n    \"use2-az2\",\n    \"use2-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-aws-v2-arm\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// aws_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-2\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-aws-v2-arm\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# aws_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-2\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-aws-v2-arm\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // aws_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-2\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"use2-az1\",\n\t\t\t\"use2-az2\",\n\t\t\t\"use2-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-aws-v2-arm\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-2\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"use2-az1\",\n            \"use2-az2\",\n            \"use2-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-aws-v2-arm\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // aws_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-arm\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Limitations\n\nWe are not currently able to support ACL creation in self hosted clusters. This is an area of active development so expect that to change soon.\n\n## Import\n\nWe do not support the import of ACLs into the Redpanda provider at this time.\n\n",
            "properties": {
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host address to use for this ACL\n"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type that shall be allowed or denied (e.g READ)\n"
                },
                "permissionType": {
                    "type": "string",
                    "description": "The permission type. It determines whether the operation should be ALLOWED or DENIED\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal to apply this ACL for\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The name of the resource this ACL entry will be on\n"
                },
                "resourcePatternType": {
                    "type": "string",
                    "description": "The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource (TOPIC, GROUP, etc...) this ACL shall target\n"
                }
            },
            "required": [
                "clusterApiUrl",
                "host",
                "operation",
                "permissionType",
                "principal",
                "resourceName",
                "resourcePatternType",
                "resourceType"
            ],
            "inputProperties": {
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host address to use for this ACL\n"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type that shall be allowed or denied (e.g READ)\n"
                },
                "permissionType": {
                    "type": "string",
                    "description": "The permission type. It determines whether the operation should be ALLOWED or DENIED\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The principal to apply this ACL for\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The name of the resource this ACL entry will be on\n"
                },
                "resourcePatternType": {
                    "type": "string",
                    "description": "The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource (TOPIC, GROUP, etc...) this ACL shall target\n"
                }
            },
            "requiredInputs": [
                "clusterApiUrl",
                "host",
                "operation",
                "permissionType",
                "principal",
                "resourceName",
                "resourcePatternType",
                "resourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host address to use for this ACL\n"
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation type that shall be allowed or denied (e.g READ)\n"
                    },
                    "permissionType": {
                        "type": "string",
                        "description": "The permission type. It determines whether the operation should be ALLOWED or DENIED\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The principal to apply this ACL for\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "The name of the resource this ACL entry will be on\n"
                    },
                    "resourcePatternType": {
                        "type": "string",
                        "description": "The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource (TOPIC, GROUP, etc...) this ACL shall target\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/cluster:Cluster": {
            "description": "Enables the provisioning and management of Redpanda clusters on AWS and GCP. A cluster must always have a network and resource group.\n\n\n## Usage\n\n### On AWS\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-2\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"use2-az1\",\n    \"use2-az2\",\n    \"use2-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-aws-v2-arm\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// aws_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-2\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-aws-v2-arm\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# aws_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-2\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-aws-v2-arm\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // aws_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-2\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"use2-az1\",\n\t\t\t\"use2-az2\",\n\t\t\t\"use2-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-aws-v2-arm\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-2\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"use2-az1\",\n            \"use2-az2\",\n            \"use2-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-aws-v2-arm\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // aws_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-arm\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### On GCP\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-central1\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"gcp\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"us-central1-a\",\n    \"us-central1-b\",\n    \"us-central1-c\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-gcp-um4g\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n});\n//# This is a reference for GCP tags\n//   tags = {\n//     \"key\" = \"value\"\n//   }\n//# This is a reference for GCP Private Service Connect\n//   gcp_private_service_connect = {\n//     enabled               = true\n//     global_access_enabled = true\n//     consumer_accept_list = [\n//       {\n//         source = \"projects/123456789012\"\n//       }\n//     ]\n//   }\nconst clusterName = config.get(\"clusterName\") || \"\";\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"\";\nconst networkName = config.get(\"networkName\") || \"\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-central1\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"gcp\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"us-central1-a\",\n        \"us-central1-b\",\n        \"us-central1-c\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-gcp-um4g\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True)\n## This is a reference for GCP tags\n#   tags = {\n#     \"key\" = \"value\"\n#   }\n## This is a reference for GCP Private Service Connect\n#   gcp_private_service_connect = {\n#     enabled               = true\n#     global_access_enabled = true\n#     consumer_accept_list = [\n#       {\n#         source = \"projects/123456789012\"\n#       }\n#     ]\n#   }\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"\"\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-central1\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"gcp\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"us-central1-a\",\n        \"us-central1-b\",\n        \"us-central1-c\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-gcp-um4g\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n    });\n\n    //# This is a reference for GCP tags\n    //   tags = {\n    //     \"key\" = \"value\"\n    //   }\n    //# This is a reference for GCP Private Service Connect\n    //   gcp_private_service_connect = {\n    //     enabled               = true\n    //     global_access_enabled = true\n    //     consumer_accept_list = [\n    //       {\n    //         source = \"projects/123456789012\"\n    //       }\n    //     ]\n    //   }\n    var clusterName = config.Get(\"clusterName\") ?? \"\";\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"\";\n    var networkName = config.Get(\"networkName\") ?? \"\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-central1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"gcp\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"us-central1-a\",\n\t\t\t\"us-central1-b\",\n\t\t\t\"us-central1-c\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-gcp-um4g\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tclusterName := \"\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tresourceGroupName := \"\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-central1\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"gcp\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"us-central1-a\",\n            \"us-central1-b\",\n            \"us-central1-c\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-gcp-um4g\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .build());\n\n        //# This is a reference for GCP tags\n        //   tags = {\n        //     \"key\" = \"value\"\n        //   }\n        //# This is a reference for GCP Private Service Connect\n        //   gcp_private_service_connect = {\n        //     enabled               = true\n        //     global_access_enabled = true\n        //     consumer_accept_list = [\n        //       {\n        //         source = \"projects/123456789012\"\n        //       }\n        //     ]\n        //   }\n        final var clusterName = config.get(\"clusterName\").orElse(\"\");\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"\");\n        final var networkName = config.get(\"networkName\").orElse(\"\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  clusterName:\n    type: string\n    default: \"\"\n  resourceGroupName:\n    type: string\n    default: \"\"\n  networkName:\n    type: string\n    default: \"\"\n  region:\n    type: string\n    default: us-central1\n  zones:\n    type: dynamic\n    default:\n      - us-central1-a\n      - us-central1-b\n      - us-central1-c\n  cloudProvider:\n    type: string\n    default: gcp\n  throughputTier:\n    type: string\n    default: tier-1-gcp-um4g\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### On Azure\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst cloudProvider = config.get(\"cloudProvider\") || \"azure\";\nconst region = config.get(\"region\") || \"eastus\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"eastus-az1\",\n    \"eastus-az2\",\n    \"eastus-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-azure-v3-x86\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n//   azure_private_link = {\n//     enabled         = true\n//     connect_console = true\n//     allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n//   }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"azure\"\nregion = config.get(\"region\")\nif region is None:\n    region = \"eastus\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"eastus-az1\",\n        \"eastus-az2\",\n        \"eastus-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-azure-v3-x86\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n#   azure_private_link = {\n#     enabled         = true\n#     connect_console = true\n#     allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n#   }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"azure\";\n    var region = config.Get(\"region\") ?? \"eastus\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"eastus-az1\",\n        \"eastus-az2\",\n        \"eastus-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-azure-v3-x86\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    //   azure_private_link = {\n    //     enabled         = true\n    //     connect_console = true\n    //     allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n    //   }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tcloudProvider := \"azure\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\tregion := \"eastus\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"eastus-az1\",\n\t\t\t\"eastus-az2\",\n\t\t\t\"eastus-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-azure-v3-x86\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"azure\");\n        final var region = config.get(\"region\").orElse(\"eastus\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"eastus-az1\",\n            \"eastus-az2\",\n            \"eastus-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-azure-v3-x86\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        //   azure_private_link = {\n        //     enabled         = true\n        //     connect_console = true\n        //     allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n        //   }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  cloudProvider:\n    type: string\n    default: azure\n  region:\n    type: string\n    default: eastus\n  zones:\n    type: dynamic\n    default:\n      - eastus-az1\n      - eastus-az2\n      - eastus-az3\n  throughputTier:\n    type: string\n    default: tier-1-azure-v3-x86\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## BYOC\n\nThis configuration of cluster allows the end user to provide access to their cloud account to the provider so that it can create the necessary infrastructure in their account rather than in Redpanda's Cloud.\n\n#### Additional Requirements\n\nTo build a BYOC cluster you must provide credentials that enable the provider to authenticate to the relevant cloud provider. How this works will depend on which cloud provider you are using.\n\n### AWS BYOC\n\nTo create a BYOC AWS cluster you must provide an AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. The account [must have fairly wide ranging permissions](https://docs.redpanda.com/redpanda-cloud/security/authorization/cloud-iam-policies/) to create the necessary infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-2\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"byoc\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"use2-az1\",\n    \"use2-az2\",\n    \"use2-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-aws-v2-x86\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: testNetwork.cloudProvider,\n    region: testNetwork.region,\n    clusterType: testNetwork.clusterType,\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// aws_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-2\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"byoc\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-aws-v2-x86\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=test_network.cloud_provider,\n    region=test_network.region,\n    cluster_type=test_network.cluster_type,\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# aws_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-2\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"byoc\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-aws-v2-x86\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = testNetwork.CloudProvider,\n        Region = testNetwork.Region,\n        ClusterType = testNetwork.ClusterType,\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // aws_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-2\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"byoc\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"use2-az1\",\n\t\t\t\"use2-az2\",\n\t\t\t\"use2-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-aws-v2-x86\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   testNetwork.CloudProvider,\n\t\t\tRegion:          testNetwork.Region,\n\t\t\tClusterType:     testNetwork.ClusterType,\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-2\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"byoc\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"use2-az1\",\n            \"use2-az2\",\n            \"use2-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-aws-v2-x86\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(testNetwork.cloudProvider())\n            .region(testNetwork.region())\n            .clusterType(testNetwork.clusterType())\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // aws_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-x86\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: byoc\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${testNetwork.cloudProvider}\n      region: ${testNetwork.region}\n      clusterType: ${testNetwork.clusterType}\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### GCP BYOC\n\nTo create a GCP BYOC cluster you must provide a GCP_PROJECT_ID and GOOGLE_CREDENTIALS. We also accept the credentials encoded in base64 format if you use GOOGLE_CREDENTIALS_BASE64. The account [must have fairly wide ranging permissions](https://docs.redpanda.com/redpanda-cloud/security/authorization/cloud-iam-policies-gcp/) to create the necessary infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-central1\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"gcp\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"byoc\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"us-central1-a\",\n    \"us-central1-b\",\n    \"us-central1-c\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-gcp-um4g\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: testNetwork.cloudProvider,\n    region: testNetwork.region,\n    clusterType: testNetwork.clusterType,\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n});\n//# This is a reference for GCP tags\n//   tags = {\n//     \"key\" = \"value\"\n//   }\n//# This is a reference for GCP Private Service Connect\n//   gcp_private_service_connect = {\n//     enabled               = true\n//     global_access_enabled = true\n//     consumer_accept_list = [\n//       {\n//         source = \"projects/123456789012\"\n//       }\n//     ]\n//   }\nconst clusterName = config.get(\"clusterName\") || \"\";\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"\";\nconst networkName = config.get(\"networkName\") || \"\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-central1\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"gcp\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"byoc\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"us-central1-a\",\n        \"us-central1-b\",\n        \"us-central1-c\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-gcp-um4g\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=test_network.cloud_provider,\n    region=test_network.region,\n    cluster_type=test_network.cluster_type,\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True)\n## This is a reference for GCP tags\n#   tags = {\n#     \"key\" = \"value\"\n#   }\n## This is a reference for GCP Private Service Connect\n#   gcp_private_service_connect = {\n#     enabled               = true\n#     global_access_enabled = true\n#     consumer_accept_list = [\n#       {\n#         source = \"projects/123456789012\"\n#       }\n#     ]\n#   }\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"\"\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-central1\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"gcp\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"byoc\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"us-central1-a\",\n        \"us-central1-b\",\n        \"us-central1-c\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-gcp-um4g\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = testNetwork.CloudProvider,\n        Region = testNetwork.Region,\n        ClusterType = testNetwork.ClusterType,\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n    });\n\n    //# This is a reference for GCP tags\n    //   tags = {\n    //     \"key\" = \"value\"\n    //   }\n    //# This is a reference for GCP Private Service Connect\n    //   gcp_private_service_connect = {\n    //     enabled               = true\n    //     global_access_enabled = true\n    //     consumer_accept_list = [\n    //       {\n    //         source = \"projects/123456789012\"\n    //       }\n    //     ]\n    //   }\n    var clusterName = config.Get(\"clusterName\") ?? \"\";\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"\";\n    var networkName = config.Get(\"networkName\") ?? \"\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-central1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"gcp\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"byoc\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"us-central1-a\",\n\t\t\t\"us-central1-b\",\n\t\t\t\"us-central1-c\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-gcp-um4g\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   testNetwork.CloudProvider,\n\t\t\tRegion:          testNetwork.Region,\n\t\t\tClusterType:     testNetwork.ClusterType,\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tclusterName := \"\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tresourceGroupName := \"\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-central1\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"gcp\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"byoc\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"us-central1-a\",\n            \"us-central1-b\",\n            \"us-central1-c\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-gcp-um4g\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(testNetwork.cloudProvider())\n            .region(testNetwork.region())\n            .clusterType(testNetwork.clusterType())\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .build());\n\n        //# This is a reference for GCP tags\n        //   tags = {\n        //     \"key\" = \"value\"\n        //   }\n        //# This is a reference for GCP Private Service Connect\n        //   gcp_private_service_connect = {\n        //     enabled               = true\n        //     global_access_enabled = true\n        //     consumer_accept_list = [\n        //       {\n        //         source = \"projects/123456789012\"\n        //       }\n        //     ]\n        //   }\n        final var clusterName = config.get(\"clusterName\").orElse(\"\");\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"\");\n        final var networkName = config.get(\"networkName\").orElse(\"\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  clusterName:\n    type: string\n    default: \"\"\n  resourceGroupName:\n    type: string\n    default: \"\"\n  networkName:\n    type: string\n    default: \"\"\n  region:\n    type: string\n    default: us-central1\n  zones:\n    type: dynamic\n    default:\n      - us-central1-a\n      - us-central1-b\n      - us-central1-c\n  cloudProvider:\n    type: string\n    default: gcp\n  throughputTier:\n    type: string\n    default: tier-1-gcp-um4g\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: byoc\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${testNetwork.cloudProvider}\n      region: ${testNetwork.region}\n      clusterType: ${testNetwork.clusterType}\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Azure BYOC\n\nTo create a BYOC Azure cluster you must provide Azure credentials, be logged in to the Azure CLI, or specify an Azure authentication method. This provider supports the same authentication methods and environment variables as the official AzureRM provider. For example, to use a service principal and client certificate, you can pass the environment variables `ARM_CLIENT_ID`, `ARM_CLIENT_SECRET`, `ARM_TENANT_ID`, and `ARM_SUBSCRIPTION_ID`.\n\nThe account [must have fairly wide ranging permissions](https://docs.redpanda.com/redpanda-cloud/security/authorization/cloud-iam-policies-azure/) to create the necessary infrastructure.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst cloudProvider = config.get(\"cloudProvider\") || \"azure\";\nconst region = config.get(\"region\") || \"eastus\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"byoc\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"eastus-az1\",\n    \"eastus-az2\",\n    \"eastus-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-azure-v3-x86\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: testNetwork.cloudProvider,\n    region: testNetwork.region,\n    clusterType: testNetwork.clusterType,\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// azure_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"azure\"\nregion = config.get(\"region\")\nif region is None:\n    region = \"eastus\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"byoc\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"eastus-az1\",\n        \"eastus-az2\",\n        \"eastus-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-azure-v3-x86\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=test_network.cloud_provider,\n    region=test_network.region,\n    cluster_type=test_network.cluster_type,\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# azure_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"azure\";\n    var region = config.Get(\"region\") ?? \"eastus\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"byoc\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"eastus-az1\",\n        \"eastus-az2\",\n        \"eastus-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-azure-v3-x86\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = testNetwork.CloudProvider,\n        Region = testNetwork.Region,\n        ClusterType = testNetwork.ClusterType,\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // azure_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tcloudProvider := \"azure\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\tregion := \"eastus\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"byoc\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"eastus-az1\",\n\t\t\t\"eastus-az2\",\n\t\t\t\"eastus-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-azure-v3-x86\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   testNetwork.CloudProvider,\n\t\t\tRegion:          testNetwork.Region,\n\t\t\tClusterType:     testNetwork.ClusterType,\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"azure\");\n        final var region = config.get(\"region\").orElse(\"eastus\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"byoc\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"eastus-az1\",\n            \"eastus-az2\",\n            \"eastus-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-azure-v3-x86\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(testNetwork.cloudProvider())\n            .region(testNetwork.region())\n            .clusterType(testNetwork.clusterType())\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // azure_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_subscriptions = [\"12345678-1234-1234-1234-123456789012\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  cloudProvider:\n    type: string\n    default: azure\n  region:\n    type: string\n    default: eastus\n  zones:\n    type: dynamic\n    default:\n      - eastus-az1\n      - eastus-az2\n      - eastus-az3\n  throughputTier:\n    type: string\n    default: tier-1-azure-v3-x86\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: byoc\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${testNetwork.cloudProvider}\n      region: ${testNetwork.region}\n      clusterType: ${testNetwork.clusterType}\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## BYOVPC\n\nThis accepts a network and other elements created by the end user inside their cloud provider account (currently limited to AWS) and builds a Redpanda Cluster inside it.\n\nThere is a module provided for convenience of the end user here that handles the necessary setup. It contains outputs for the inputs the provider requires.\n\n### AWS BYOVPC\n\nHas the same requirements as the AWS BYOC Cluster in addition to ARNs for numerous resources that the end user must create.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nconfiguration:\n  # Existing variables from original configuration\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-x86\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: byoc\n      customerManagedResources:\n        aws:\n          managementBucket:\n            arn: ${module.redpanda_byovpc.management_bucket_arn}\n          dynamodbTable:\n            arn: ${module.redpanda_byovpc.dynamodb_table_arn}\n          vpc:\n            arn: ${module.redpanda_byovpc.vpc_arn}\n          privateSubnets:\n            arns: ${module.redpanda_byovpc.private_subnet_arns}\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${testNetwork.cloudProvider}\n      region: ${testNetwork.region}\n      clusterType: ${testNetwork.clusterType}\n      connectionType: private\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n      customerManagedResources:\n        aws:\n          awsPermissionsBoundaryPolicyArn:\n            arn: ${module.redpanda_byovpc.permissions_boundary_policy_arn}\n          agentInstanceProfile:\n            arn: ${module.redpanda_byovpc.agent_instance_profile_arn}\n          connectorsNodeGroupInstanceProfile:\n            arn: ${module.redpanda_byovpc.connectors_node_group_instance_profile_arn}\n          utilityNodeGroupInstanceProfile:\n            arn: ${module.redpanda_byovpc.utility_node_group_instance_profile_arn}\n          redpandaNodeGroupInstanceProfile:\n            arn: ${module.redpanda_byovpc.redpanda_node_group_instance_profile_arn}\n          k8sClusterRole:\n            arn: ${module.redpanda_byovpc.k8s_cluster_role_arn}\n          redpandaAgentSecurityGroup:\n            arn: ${module.redpanda_byovpc.redpanda_agent_security_group_arn}\n          connectorsSecurityGroup:\n            arn: ${module.redpanda_byovpc.connectors_security_group_arn}\n          redpandaNodeGroupSecurityGroup:\n            arn: ${module.redpanda_byovpc.redpanda_node_group_security_group_arn}\n          utilitySecurityGroup:\n            arn: ${module.redpanda_byovpc.utility_security_group_arn}\n          clusterSecurityGroup:\n            arn: ${module.redpanda_byovpc.cluster_security_group_arn}\n          nodeSecurityGroup:\n            arn: ${module.redpanda_byovpc.node_security_group_arn}\n          cloudStorageBucket:\n            arn: ${module.redpanda_byovpc.cloud_storage_bucket_arn}\n          permissionsBoundaryPolicy:\n            arn: ${module.redpanda_byovpc.permissions_boundary_policy_arn}\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example Usage of a data source BYOC to manage users and ACLs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst config = new pulumi.Config();\nconst clusterId = config.get(\"clusterId\") || \"\";\nconst testCluster = redpanda.getCluster({\n    id: clusterId,\n});\nconst topicConfig = config.getObject\u003cany\u003e(\"topicConfig\") || {\n    \"cleanup.policy\": \"compact\",\n    \"flush.ms\": 100,\n    \"compression.type\": \"snappy\",\n};\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n    allowDeletion: true,\n    configuration: topicConfig,\n});\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"CLUSTER\",\n    resourceName: \"kafka-cluster\",\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"ALTER\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n});\nconst userName = config.get(\"userName\") || \"data-test-username\";\nconst topicName = config.get(\"topicName\") || \"data-test-topic\";\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\nimport pulumiverse_redpanda as redpanda\n\nconfig = pulumi.Config()\ncluster_id = config.get(\"clusterId\")\nif cluster_id is None:\n    cluster_id = \"\"\ntest_cluster = redpanda.get_cluster(id=cluster_id)\ntopic_config = config.get_object(\"topicConfig\")\nif topic_config is None:\n    topic_config = {\n        \"cleanup.policy\": \"compact\",\n        \"flush.ms\": 100,\n        \"compression.type\": \"snappy\",\n    }\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True,\n    configuration=topic_config)\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"CLUSTER\",\n    resource_name_=\"kafka-cluster\",\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"ALTER\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"data-test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"data-test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var clusterId = config.Get(\"clusterId\") ?? \"\";\n    var testCluster = Redpanda.GetCluster.Invoke(new()\n    {\n        Id = clusterId,\n    });\n\n    var topicConfig = config.GetObject\u003cdynamic\u003e(\"topicConfig\") ?? \n    {\n        { \"cleanup.policy\", \"compact\" },\n        { \"flush.ms\", 100 },\n        { \"compression.type\", \"snappy\" },\n    };\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n        AllowDeletion = true,\n        Configuration = topicConfig,\n    });\n\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"CLUSTER\",\n        ResourceName = \"kafka-cluster\",\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"ALTER\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n    });\n\n    var userName = config.Get(\"userName\") ?? \"data-test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"data-test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tclusterId := \"\"\n\t\tif param := cfg.Get(\"clusterId\"); param != \"\" {\n\t\t\tclusterId = param\n\t\t}\n\t\ttestCluster, err := redpanda.LookupCluster(ctx, \u0026redpanda.LookupClusterArgs{\n\t\t\tId: clusterId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttopicConfig := map[string]interface{}{\n\t\t\t\"cleanup.policy\":   \"compact\",\n\t\t\t\"flush.ms\":         100,\n\t\t\t\"compression.type\": \"snappy\",\n\t\t}\n\t\tif param := cfg.GetObject(\"topicConfig\"); param != nil {\n\t\t\ttopicConfig = param\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\t_, err = redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     pulumi.String(testCluster.ClusterApiUrl),\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t\tConfiguration:     pulumi.Any(topicConfig),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: pulumi.String(testCluster.ClusterApiUrl),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"CLUSTER\"),\n\t\t\tResourceName:        pulumi.String(\"kafka-cluster\"),\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"ALTER\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  pulumi.String(testCluster.ClusterApiUrl),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"data-test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"data-test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetClusterArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var clusterId = config.get(\"clusterId\").orElse(\"\");\n        final var testCluster = RedpandaFunctions.getCluster(GetClusterArgs.builder()\n            .id(clusterId)\n            .build());\n\n        final var topicConfig = config.get(\"topicConfig\").orElse(Map.ofEntries(\n            Map.entry(\"cleanup.policy\", \"compact\"),\n            Map.entry(\"flush.ms\", 100),\n            Map.entry(\"compression.type\", \"snappy\")\n        ));\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .configuration(topicConfig)\n            .build());\n\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"CLUSTER\")\n            .resourceName(\"kafka-cluster\")\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"ALTER\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"data-test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"data-test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  clusterId:\n    type: string\n    default: \"\"\n  topicConfig:\n    type: dynamic\n    default:\n      cleanup.policy: compact\n      flush.ms: 100\n      compression.type: snappy\n  userName:\n    type: string\n    default: data-test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: data-test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n      configuration: ${topicConfig}\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: CLUSTER\n      resourceName: kafka-cluster\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: ALTER\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\nvariables:\n  testCluster:\n    fn::invoke:\n      function: redpanda:getCluster\n      arguments:\n        id: ${clusterId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/cluster:Cluster example clusterId\n```\n\n",
            "properties": {
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Allows deletion of the cluster. Defaults to false.\n"
                },
                "awsPrivateLink": {
                    "$ref": "#/types/redpanda:index/ClusterAwsPrivateLink:ClusterAwsPrivateLink",
                    "description": "AWS PrivateLink configuration.\n"
                },
                "azurePrivateLink": {
                    "$ref": "#/types/redpanda:index/ClusterAzurePrivateLink:ClusterAzurePrivateLink",
                    "description": "Azure Private Link configuration.\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider where resources are created.\n"
                },
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The URL of the cluster API.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type. Type is immutable and can only be set on cluster creation.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when the cluster was created.\n"
                },
                "customerManagedResources": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResources:ClusterCustomerManagedResources",
                    "description": "Customer managed resources configuration for the cluster.\n"
                },
                "gcpGlobalAccessEnabled": {
                    "type": "boolean",
                    "description": "If true, GCP global access is enabled.\n"
                },
                "gcpPrivateServiceConnect": {
                    "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnect:ClusterGcpPrivateServiceConnect",
                    "description": "GCP Private Service Connect configuration.\n"
                },
                "httpProxy": {
                    "$ref": "#/types/redpanda:index/ClusterHttpProxy:ClusterHttpProxy",
                    "description": "HTTP Proxy properties.\n"
                },
                "kafkaApi": {
                    "$ref": "#/types/redpanda:index/ClusterKafkaApi:ClusterKafkaApi",
                    "description": "Cluster's Kafka API properties.\n"
                },
                "kafkaConnect": {
                    "$ref": "#/types/redpanda:index/ClusterKafkaConnect:ClusterKafkaConnect",
                    "description": "Kafka Connect configuration.\n"
                },
                "maintenanceWindowConfig": {
                    "$ref": "#/types/redpanda:index/ClusterMaintenanceWindowConfig:ClusterMaintenanceWindowConfig",
                    "description": "Maintenance window configuration for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name of the cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "Network ID where cluster is placed.\n"
                },
                "prometheus": {
                    "$ref": "#/types/redpanda:index/ClusterPrometheus:ClusterPrometheus",
                    "description": "Prometheus metrics endpoint properties.\n"
                },
                "readReplicaClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of clusters that can create read-only topics from this cluster.\n"
                },
                "redpandaConsole": {
                    "$ref": "#/types/redpanda:index/ClusterRedpandaConsole:ClusterRedpandaConsole",
                    "description": "Redpanda Console properties.\n"
                },
                "redpandaVersion": {
                    "type": "string",
                    "description": "Current Redpanda version of the cluster.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Cloud provider region. Region represents the name of the region where the cluster will be provisioned.\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "Resource group ID of the cluster.\n"
                },
                "schemaRegistry": {
                    "$ref": "#/types/redpanda:index/ClusterSchemaRegistry:ClusterSchemaRegistry",
                    "description": "Schema Registry properties.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the cluster.\n"
                },
                "stateDescription": {
                    "$ref": "#/types/redpanda:index/ClusterStateDescription:ClusterStateDescription",
                    "description": "Detailed state description when cluster is in a non-ready state.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix \"gcp.network-tag.\", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is \"gcp.network-tag.network-tag-foo\", the network tag named \"network-tag-foo\" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.\n"
                },
                "throughputTier": {
                    "type": "string",
                    "description": "Throughput tier of the cluster.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.\n"
                }
            },
            "required": [
                "clusterApiUrl",
                "clusterType",
                "connectionType",
                "createdAt",
                "httpProxy",
                "kafkaApi",
                "kafkaConnect",
                "maintenanceWindowConfig",
                "name",
                "networkId",
                "prometheus",
                "redpandaConsole",
                "resourceGroupId",
                "schemaRegistry",
                "state",
                "stateDescription",
                "throughputTier"
            ],
            "inputProperties": {
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Allows deletion of the cluster. Defaults to false.\n"
                },
                "awsPrivateLink": {
                    "$ref": "#/types/redpanda:index/ClusterAwsPrivateLink:ClusterAwsPrivateLink",
                    "description": "AWS PrivateLink configuration.\n"
                },
                "azurePrivateLink": {
                    "$ref": "#/types/redpanda:index/ClusterAzurePrivateLink:ClusterAzurePrivateLink",
                    "description": "Azure Private Link configuration.\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider where resources are created.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type. Type is immutable and can only be set on cluster creation.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.\n"
                },
                "customerManagedResources": {
                    "$ref": "#/types/redpanda:index/ClusterCustomerManagedResources:ClusterCustomerManagedResources",
                    "description": "Customer managed resources configuration for the cluster.\n"
                },
                "gcpGlobalAccessEnabled": {
                    "type": "boolean",
                    "description": "If true, GCP global access is enabled.\n"
                },
                "gcpPrivateServiceConnect": {
                    "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnect:ClusterGcpPrivateServiceConnect",
                    "description": "GCP Private Service Connect configuration.\n"
                },
                "httpProxy": {
                    "$ref": "#/types/redpanda:index/ClusterHttpProxy:ClusterHttpProxy",
                    "description": "HTTP Proxy properties.\n"
                },
                "kafkaApi": {
                    "$ref": "#/types/redpanda:index/ClusterKafkaApi:ClusterKafkaApi",
                    "description": "Cluster's Kafka API properties.\n"
                },
                "kafkaConnect": {
                    "$ref": "#/types/redpanda:index/ClusterKafkaConnect:ClusterKafkaConnect",
                    "description": "Kafka Connect configuration.\n"
                },
                "maintenanceWindowConfig": {
                    "$ref": "#/types/redpanda:index/ClusterMaintenanceWindowConfig:ClusterMaintenanceWindowConfig",
                    "description": "Maintenance window configuration for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name of the cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "Network ID where cluster is placed.\n"
                },
                "readReplicaClusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of clusters that can create read-only topics from this cluster.\n"
                },
                "redpandaVersion": {
                    "type": "string",
                    "description": "Current Redpanda version of the cluster.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Cloud provider region. Region represents the name of the region where the cluster will be provisioned.\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "Resource group ID of the cluster.\n"
                },
                "schemaRegistry": {
                    "$ref": "#/types/redpanda:index/ClusterSchemaRegistry:ClusterSchemaRegistry",
                    "description": "Schema Registry properties.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix \"gcp.network-tag.\", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is \"gcp.network-tag.network-tag-foo\", the network tag named \"network-tag-foo\" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.\n"
                },
                "throughputTier": {
                    "type": "string",
                    "description": "Throughput tier of the cluster.\n"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.\n"
                }
            },
            "requiredInputs": [
                "clusterType",
                "connectionType",
                "networkId",
                "resourceGroupId",
                "throughputTier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "allowDeletion": {
                        "type": "boolean",
                        "description": "Allows deletion of the cluster. Defaults to false.\n"
                    },
                    "awsPrivateLink": {
                        "$ref": "#/types/redpanda:index/ClusterAwsPrivateLink:ClusterAwsPrivateLink",
                        "description": "AWS PrivateLink configuration.\n"
                    },
                    "azurePrivateLink": {
                        "$ref": "#/types/redpanda:index/ClusterAzurePrivateLink:ClusterAzurePrivateLink",
                        "description": "Azure Private Link configuration.\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where resources are created.\n"
                    },
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The URL of the cluster API.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type. Type is immutable and can only be set on cluster creation.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when the cluster was created.\n"
                    },
                    "customerManagedResources": {
                        "$ref": "#/types/redpanda:index/ClusterCustomerManagedResources:ClusterCustomerManagedResources",
                        "description": "Customer managed resources configuration for the cluster.\n"
                    },
                    "gcpGlobalAccessEnabled": {
                        "type": "boolean",
                        "description": "If true, GCP global access is enabled.\n"
                    },
                    "gcpPrivateServiceConnect": {
                        "$ref": "#/types/redpanda:index/ClusterGcpPrivateServiceConnect:ClusterGcpPrivateServiceConnect",
                        "description": "GCP Private Service Connect configuration.\n"
                    },
                    "httpProxy": {
                        "$ref": "#/types/redpanda:index/ClusterHttpProxy:ClusterHttpProxy",
                        "description": "HTTP Proxy properties.\n"
                    },
                    "kafkaApi": {
                        "$ref": "#/types/redpanda:index/ClusterKafkaApi:ClusterKafkaApi",
                        "description": "Cluster's Kafka API properties.\n"
                    },
                    "kafkaConnect": {
                        "$ref": "#/types/redpanda:index/ClusterKafkaConnect:ClusterKafkaConnect",
                        "description": "Kafka Connect configuration.\n"
                    },
                    "maintenanceWindowConfig": {
                        "$ref": "#/types/redpanda:index/ClusterMaintenanceWindowConfig:ClusterMaintenanceWindowConfig",
                        "description": "Maintenance window configuration for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name of the cluster.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "Network ID where cluster is placed.\n"
                    },
                    "prometheus": {
                        "$ref": "#/types/redpanda:index/ClusterPrometheus:ClusterPrometheus",
                        "description": "Prometheus metrics endpoint properties.\n"
                    },
                    "readReplicaClusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of clusters that can create read-only topics from this cluster.\n"
                    },
                    "redpandaConsole": {
                        "$ref": "#/types/redpanda:index/ClusterRedpandaConsole:ClusterRedpandaConsole",
                        "description": "Redpanda Console properties.\n"
                    },
                    "redpandaVersion": {
                        "type": "string",
                        "description": "Current Redpanda version of the cluster.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cloud provider region. Region represents the name of the region where the cluster will be provisioned.\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "Resource group ID of the cluster.\n"
                    },
                    "schemaRegistry": {
                        "$ref": "#/types/redpanda:index/ClusterSchemaRegistry:ClusterSchemaRegistry",
                        "description": "Schema Registry properties.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the cluster.\n"
                    },
                    "stateDescription": {
                        "$ref": "#/types/redpanda:index/ClusterStateDescription:ClusterStateDescription",
                        "description": "Detailed state description when cluster is in a non-ready state.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix \"gcp.network-tag.\", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is \"gcp.network-tag.network-tag-foo\", the network tag named \"network-tag-foo\" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.\n"
                    },
                    "throughputTier": {
                        "type": "string",
                        "description": "Throughput tier of the cluster.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/network:Network": {
            "description": "Creates a network in the Redpanda Cloud.\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-1\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-1\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-1\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\t_, err = redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-1\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-1\n  cloudProvider:\n    type: string\n    default: aws\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/network:Network example networkId\n```\n\n",
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr_block to create the network in\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "The cloud provider to create the network in.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The type of cluster this network is associated with, can be one of dedicated or cloud\n"
                },
                "customerManagedResources": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResources:NetworkCustomerManagedResources"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to create the network in.\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "The ID of the resource group in which to create the network\n"
                }
            },
            "required": [
                "cloudProvider",
                "clusterType",
                "name",
                "region",
                "resourceGroupId"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr_block to create the network in\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "The cloud provider to create the network in.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The type of cluster this network is associated with, can be one of dedicated or cloud\n"
                },
                "customerManagedResources": {
                    "$ref": "#/types/redpanda:index/NetworkCustomerManagedResources:NetworkCustomerManagedResources"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to create the network in.\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "The ID of the resource group in which to create the network\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "clusterType",
                "region",
                "resourceGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "description": "The cidr_block to create the network in\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider to create the network in.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "The type of cluster this network is associated with, can be one of dedicated or cloud\n"
                    },
                    "customerManagedResources": {
                        "$ref": "#/types/redpanda:index/NetworkCustomerManagedResources:NetworkCustomerManagedResources"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to create the network in.\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "The ID of the resource group in which to create the network\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/resourceGroup:ResourceGroup": {
            "description": "A Redpanda Cloud resource group\n\nCreates a Resource Group in the Redpanda Cloud.\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-2\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"use2-az1\",\n    \"use2-az2\",\n    \"use2-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-aws-v2-arm\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// aws_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-2\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-aws-v2-arm\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# aws_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-2\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-aws-v2-arm\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // aws_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-2\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"use2-az1\",\n\t\t\t\"use2-az2\",\n\t\t\t\"use2-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-aws-v2-arm\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-2\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"use2-az1\",\n            \"use2-az2\",\n            \"use2-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-aws-v2-arm\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // aws_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-arm\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/resourceGroup:ResourceGroup example resourcegroupId\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/serverlessCluster:ServerlessCluster": {
            "description": "Enables the provisioning and management of Redpanda Serverless clusters. A Serverless cluster requires a resource group.\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"eu-west-1\";\nconst testServerlessCluster = new redpanda.ServerlessCluster(\"testServerlessCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    serverlessRegion: region,\n});\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testgroup\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"eu-west-1\"\ntest_serverless_cluster = redpanda.ServerlessCluster(\"testServerlessCluster\",\n    resource_group_id=test_resource_group.id,\n    serverless_region=region)\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testgroup\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"eu-west-1\";\n    var testServerlessCluster = new Redpanda.ServerlessCluster(\"testServerlessCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        ServerlessRegion = region,\n    });\n\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testgroup\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"eu-west-1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\t_, err = redpanda.NewServerlessCluster(ctx, \"testServerlessCluster\", \u0026redpanda.ServerlessClusterArgs{\n\t\t\tResourceGroupId:  testResourceGroup.ID(),\n\t\t\tServerlessRegion: pulumi.String(region),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testgroup\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.ServerlessCluster;\nimport com.pulumi.redpanda.ServerlessClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"eu-west-1\");\n        var testServerlessCluster = new ServerlessCluster(\"testServerlessCluster\", ServerlessClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .serverlessRegion(region)\n            .build());\n\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testgroup\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testgroup\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: eu-west-1\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testServerlessCluster:\n    type: redpanda:ServerlessCluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      serverlessRegion: ${region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Limitations\n\nServerless on GCP is currently in beta. To unlock this feature for your account, contact your Redpanda account team.\n\n### Example: Create a Serverless cluster\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"eu-west-1\";\nconst testServerlessCluster = new redpanda.ServerlessCluster(\"testServerlessCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    serverlessRegion: region,\n});\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testgroup\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"eu-west-1\"\ntest_serverless_cluster = redpanda.ServerlessCluster(\"testServerlessCluster\",\n    resource_group_id=test_resource_group.id,\n    serverless_region=region)\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testgroup\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"eu-west-1\";\n    var testServerlessCluster = new Redpanda.ServerlessCluster(\"testServerlessCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        ServerlessRegion = region,\n    });\n\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testgroup\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"eu-west-1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\t_, err = redpanda.NewServerlessCluster(ctx, \"testServerlessCluster\", \u0026redpanda.ServerlessClusterArgs{\n\t\t\tResourceGroupId:  testResourceGroup.ID(),\n\t\t\tServerlessRegion: pulumi.String(region),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testgroup\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.ServerlessCluster;\nimport com.pulumi.redpanda.ServerlessClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"eu-west-1\");\n        var testServerlessCluster = new ServerlessCluster(\"testServerlessCluster\", ServerlessClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .serverlessRegion(region)\n            .build());\n\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testgroup\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testgroup\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: eu-west-1\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testServerlessCluster:\n    type: redpanda:ServerlessCluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      serverlessRegion: ${region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/serverlessCluster:ServerlessCluster example serverlessClusterId\n```\n\n",
            "properties": {
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The URL of the dataplane API for the serverless cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the serverless cluster\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "The ID of the Resource Group in which to create the serverless cluster\n"
                },
                "serverlessRegion": {
                    "type": "string",
                    "description": "Redpanda specific region of the serverless cluster\n"
                }
            },
            "required": [
                "clusterApiUrl",
                "name",
                "resourceGroupId",
                "serverlessRegion"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the serverless cluster\n"
                },
                "resourceGroupId": {
                    "type": "string",
                    "description": "The ID of the Resource Group in which to create the serverless cluster\n"
                },
                "serverlessRegion": {
                    "type": "string",
                    "description": "Redpanda specific region of the serverless cluster\n"
                }
            },
            "requiredInputs": [
                "resourceGroupId",
                "serverlessRegion"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerlessCluster resources.\n",
                "properties": {
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The URL of the dataplane API for the serverless cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the serverless cluster\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "The ID of the Resource Group in which to create the serverless cluster\n"
                    },
                    "serverlessRegion": {
                        "type": "string",
                        "description": "Redpanda specific region of the serverless cluster\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/topic:Topic": {
            "description": "Topic represents a Kafka topic configuration\n\nCreates a topic in a Redpanda Cluster\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"us-east-2\";\nconst cloudProvider = config.get(\"cloudProvider\") || \"aws\";\nconst testNetwork = new redpanda.Network(\"testNetwork\", {\n    resourceGroupId: testResourceGroup.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    cidrBlock: \"10.0.0.0/20\",\n});\nconst zones = config.getObject\u003cany\u003e(\"zones\") || [\n    \"use2-az1\",\n    \"use2-az2\",\n    \"use2-az3\",\n];\nconst throughputTier = config.get(\"throughputTier\") || \"tier-1-aws-v2-arm\";\nconst testCluster = new redpanda.Cluster(\"testCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    networkId: testNetwork.id,\n    cloudProvider: cloudProvider,\n    region: region,\n    clusterType: \"dedicated\",\n    connectionType: \"public\",\n    throughputTier: throughputTier,\n    zones: zones,\n    allowDeletion: true,\n    tags: {\n        key: \"value\",\n    },\n});\n// aws_private_link = {\n//   enabled         = true\n//   connect_console = true\n//   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n// }\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testname\";\nconst networkName = config.get(\"networkName\") || \"testname\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.clusterApiUrl,\n    allowDeletion: true,\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"TOPIC\",\n    resourceName: testTopic.name,\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"READ\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.clusterApiUrl,\n});\nconst userName = config.get(\"userName\") || \"test-username\";\nconst topicName = config.get(\"topicName\") || \"test-topic\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"us-east-2\"\ncloud_provider = config.get(\"cloudProvider\")\nif cloud_provider is None:\n    cloud_provider = \"aws\"\ntest_network = redpanda.Network(\"testNetwork\",\n    resource_group_id=test_resource_group.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    cidr_block=\"10.0.0.0/20\")\nzones = config.get_object(\"zones\")\nif zones is None:\n    zones = [\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    ]\nthroughput_tier = config.get(\"throughputTier\")\nif throughput_tier is None:\n    throughput_tier = \"tier-1-aws-v2-arm\"\ntest_cluster = redpanda.Cluster(\"testCluster\",\n    resource_group_id=test_resource_group.id,\n    network_id=test_network.id,\n    cloud_provider=cloud_provider,\n    region=region,\n    cluster_type=\"dedicated\",\n    connection_type=\"public\",\n    throughput_tier=throughput_tier,\n    zones=zones,\n    allow_deletion=True,\n    tags={\n        \"key\": \"value\",\n    })\n# aws_private_link = {\n#   enabled         = true\n#   connect_console = true\n#   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n# }\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testname\"\nnetwork_name = config.get(\"networkName\")\nif network_name is None:\n    network_name = \"testname\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"TOPIC\",\n    resource_name_=test_topic.name,\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"READ\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"us-east-2\";\n    var cloudProvider = config.Get(\"cloudProvider\") ?? \"aws\";\n    var testNetwork = new Redpanda.Network(\"testNetwork\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        CidrBlock = \"10.0.0.0/20\",\n    });\n\n    var zones = config.GetObject\u003cdynamic\u003e(\"zones\") ?? new[]\n    {\n        \"use2-az1\",\n        \"use2-az2\",\n        \"use2-az3\",\n    };\n    var throughputTier = config.Get(\"throughputTier\") ?? \"tier-1-aws-v2-arm\";\n    var testCluster = new Redpanda.Cluster(\"testCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        NetworkId = testNetwork.Id,\n        CloudProvider = cloudProvider,\n        Region = region,\n        ClusterType = \"dedicated\",\n        ConnectionType = \"public\",\n        ThroughputTier = throughputTier,\n        Zones = zones,\n        AllowDeletion = true,\n        Tags = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    // aws_private_link = {\n    //   enabled         = true\n    //   connect_console = true\n    //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n    // }\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testname\";\n    var networkName = config.Get(\"networkName\") ?? \"testname\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n        AllowDeletion = true,\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"TOPIC\",\n        ResourceName = testTopic.Name,\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"READ\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.ClusterApiUrl,\n    });\n\n    var userName = config.Get(\"userName\") ?? \"test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"us-east-2\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\tcloudProvider := \"aws\"\n\t\tif param := cfg.Get(\"cloudProvider\"); param != \"\" {\n\t\t\tcloudProvider = param\n\t\t}\n\t\ttestNetwork, err := redpanda.NewNetwork(ctx, \"testNetwork\", \u0026redpanda.NetworkArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tCidrBlock:       pulumi.String(\"10.0.0.0/20\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzones := []string{\n\t\t\t\"use2-az1\",\n\t\t\t\"use2-az2\",\n\t\t\t\"use2-az3\",\n\t\t}\n\t\tif param := cfg.GetObject(\"zones\"); param != nil {\n\t\t\tzones = param\n\t\t}\n\t\tthroughputTier := \"tier-1-aws-v2-arm\"\n\t\tif param := cfg.Get(\"throughputTier\"); param != \"\" {\n\t\t\tthroughputTier = param\n\t\t}\n\t\ttestCluster, err := redpanda.NewCluster(ctx, \"testCluster\", \u0026redpanda.ClusterArgs{\n\t\t\tResourceGroupId: testResourceGroup.ID(),\n\t\t\tNetworkId:       testNetwork.ID(),\n\t\t\tCloudProvider:   pulumi.String(cloudProvider),\n\t\t\tRegion:          pulumi.String(region),\n\t\t\tClusterType:     pulumi.String(\"dedicated\"),\n\t\t\tConnectionType:  pulumi.String(\"public\"),\n\t\t\tThroughputTier:  pulumi.String(throughputTier),\n\t\t\tZones:           pulumi.Any(zones),\n\t\t\tAllowDeletion:   pulumi.Bool(true),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testname\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tnetworkName := \"testname\"\n\t\tif param := cfg.Get(\"networkName\"); param != \"\" {\n\t\t\tnetworkName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\ttestTopic, err := redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     testCluster.ClusterApiUrl,\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"TOPIC\"),\n\t\t\tResourceName:        testTopic.Name,\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"READ\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  testCluster.ClusterApiUrl,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.Network;\nimport com.pulumi.redpanda.NetworkArgs;\nimport com.pulumi.redpanda.Cluster;\nimport com.pulumi.redpanda.ClusterArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"us-east-2\");\n        final var cloudProvider = config.get(\"cloudProvider\").orElse(\"aws\");\n        var testNetwork = new Network(\"testNetwork\", NetworkArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .cidrBlock(\"10.0.0.0/20\")\n            .build());\n\n        final var zones = config.get(\"zones\").orElse(        \n            \"use2-az1\",\n            \"use2-az2\",\n            \"use2-az3\");\n        final var throughputTier = config.get(\"throughputTier\").orElse(\"tier-1-aws-v2-arm\");\n        var testCluster = new Cluster(\"testCluster\", ClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .networkId(testNetwork.id())\n            .cloudProvider(cloudProvider)\n            .region(region)\n            .clusterType(\"dedicated\")\n            .connectionType(\"public\")\n            .throughputTier(throughputTier)\n            .zones(zones)\n            .allowDeletion(true)\n            .tags(Map.of(\"key\", \"value\"))\n            .build());\n\n        // aws_private_link = {\n        //   enabled         = true\n        //   connect_console = true\n        //   allowed_principals = [\"arn:aws:iam::123456789024:root\"]\n        // }\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testname\");\n        final var networkName = config.get(\"networkName\").orElse(\"testname\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"TOPIC\")\n            .resourceName(testTopic.name())\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"READ\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testname\n  networkName:\n    type: string\n    default: testname\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: us-east-2\n  zones:\n    type: dynamic\n    default:\n      - use2-az1\n      - use2-az2\n      - use2-az3\n  cloudProvider:\n    type: string\n    default: aws\n  throughputTier:\n    type: string\n    default: tier-1-aws-v2-arm\n  userName:\n    type: string\n    default: test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testNetwork:\n    type: redpanda:Network\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      cidrBlock: 10.0.0.0/20\n  testCluster:\n    type: redpanda:Cluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      networkId: ${testNetwork.id}\n      cloudProvider: ${cloudProvider}\n      region: ${region}\n      clusterType: dedicated\n      connectionType: public\n      throughputTier: ${throughputTier}\n      zones: ${zones}\n      allowDeletion: true\n      tags:\n        key: value\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: TOPIC\n      resourceName: ${testTopic.name}\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: READ\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Limitations\n\nWe are not currently able to support topic creation in self hosted clusters. This is an area of active development so expect that to change soon.\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/topic:Topic example topicName,clusterId\n```\n\nWhere clusterId is the ID of the cluster in Redpanda Cloud\n\n",
            "properties": {
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Indicates whether the topic can be deleted.\n"
                },
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of string key/value pairs of topic configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "partitionCount": {
                    "type": "number",
                    "description": "The number of partitions for the topic. This determines how the data is distributed across brokers. Increases are fully supported without data loss. Decreases will destroy and recreate the topic if allow_deletion is set to true (defaults to false).\n"
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.\n"
                }
            },
            "required": [
                "clusterApiUrl",
                "configuration",
                "name",
                "partitionCount",
                "replicationFactor"
            ],
            "inputProperties": {
                "allowDeletion": {
                    "type": "boolean",
                    "description": "Indicates whether the topic can be deleted.\n"
                },
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of string key/value pairs of topic configurations.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "partitionCount": {
                    "type": "number",
                    "description": "The number of partitions for the topic. This determines how the data is distributed across brokers. Increases are fully supported without data loss. Decreases will destroy and recreate the topic if allow_deletion is set to true (defaults to false).\n"
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.\n"
                }
            },
            "requiredInputs": [
                "clusterApiUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Topic resources.\n",
                "properties": {
                    "allowDeletion": {
                        "type": "boolean",
                        "description": "Indicates whether the topic can be deleted.\n"
                    },
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                    },
                    "configuration": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of string key/value pairs of topic configurations.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the topic.\n"
                    },
                    "partitionCount": {
                        "type": "number",
                        "description": "The number of partitions for the topic. This determines how the data is distributed across brokers. Increases are fully supported without data loss. Decreases will destroy and recreate the topic if allow_deletion is set to true (defaults to false).\n"
                    },
                    "replicationFactor": {
                        "type": "number",
                        "description": "The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.\n"
                    }
                },
                "type": "object"
            }
        },
        "redpanda:index/user:User": {
            "description": "\n\n## Import\n\n```sh\n$ pulumi import redpanda:index/user:User example userName,clusterId\n```\n\nWhere clusterId is the ID of the cluster in Redpanda Cloud\n\n",
            "properties": {
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "mechanism": {
                    "type": "string",
                    "description": "Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user, must be unique\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user\n",
                    "secret": true
                }
            },
            "required": [
                "clusterApiUrl",
                "name",
                "password"
            ],
            "inputProperties": {
                "clusterApiUrl": {
                    "type": "string",
                    "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                },
                "mechanism": {
                    "type": "string",
                    "description": "Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user, must be unique\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the user\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "clusterApiUrl",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports\n"
                    },
                    "mechanism": {
                        "type": "string",
                        "description": "Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user, must be unique\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:redpanda/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:redpanda"
                    }
                },
                "type": "pulumi:providers:redpanda/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "redpanda:index/getCluster:getCluster": {
            "description": "Data source for a Redpanda Cloud cluster\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst example = redpanda.getCluster({\n    id: \"cluster_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\n\nexample = redpanda.get_cluster(id=\"cluster_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Redpanda.GetCluster.Invoke(new()\n    {\n        Id = \"cluster_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redpanda.LookupCluster(ctx, \u0026redpanda.LookupClusterArgs{\n\t\t\tId: \"cluster_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RedpandaFunctions.getCluster(GetClusterArgs.builder()\n            .id(\"cluster_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: redpanda:getCluster\n      arguments:\n        id: cluster_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example Usage of a data source BYOC to manage users and ACLs\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst config = new pulumi.Config();\nconst clusterId = config.get(\"clusterId\") || \"\";\nconst testCluster = redpanda.getCluster({\n    id: clusterId,\n});\nconst topicConfig = config.getObject\u003cany\u003e(\"topicConfig\") || {\n    \"cleanup.policy\": \"compact\",\n    \"flush.ms\": 100,\n    \"compression.type\": \"snappy\",\n};\nconst partitionCount = config.getNumber(\"partitionCount\") || 3;\nconst replicationFactor = config.getNumber(\"replicationFactor\") || 3;\nconst testTopic = new redpanda.Topic(\"testTopic\", {\n    partitionCount: partitionCount,\n    replicationFactor: replicationFactor,\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n    allowDeletion: true,\n    configuration: topicConfig,\n});\nconst userPw = config.get(\"userPw\") || \"password\";\nconst mechanism = config.get(\"mechanism\") || \"scram-sha-256\";\nconst testUser = new redpanda.User(\"testUser\", {\n    password: userPw,\n    mechanism: mechanism,\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n});\nconst testAcl = new redpanda.Acl(\"testAcl\", {\n    resourceType: \"CLUSTER\",\n    resourceName: \"kafka-cluster\",\n    resourcePatternType: \"LITERAL\",\n    principal: pulumi.interpolate`User:${testUser.name}`,\n    host: \"*\",\n    operation: \"ALTER\",\n    permissionType: \"ALLOW\",\n    clusterApiUrl: testCluster.then(testCluster =\u003e testCluster.clusterApiUrl),\n});\nconst userName = config.get(\"userName\") || \"data-test-username\";\nconst topicName = config.get(\"topicName\") || \"data-test-topic\";\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\nimport pulumiverse_redpanda as redpanda\n\nconfig = pulumi.Config()\ncluster_id = config.get(\"clusterId\")\nif cluster_id is None:\n    cluster_id = \"\"\ntest_cluster = redpanda.get_cluster(id=cluster_id)\ntopic_config = config.get_object(\"topicConfig\")\nif topic_config is None:\n    topic_config = {\n        \"cleanup.policy\": \"compact\",\n        \"flush.ms\": 100,\n        \"compression.type\": \"snappy\",\n    }\npartition_count = config.get_float(\"partitionCount\")\nif partition_count is None:\n    partition_count = 3\nreplication_factor = config.get_float(\"replicationFactor\")\nif replication_factor is None:\n    replication_factor = 3\ntest_topic = redpanda.Topic(\"testTopic\",\n    partition_count=partition_count,\n    replication_factor=replication_factor,\n    cluster_api_url=test_cluster.cluster_api_url,\n    allow_deletion=True,\n    configuration=topic_config)\nuser_pw = config.get(\"userPw\")\nif user_pw is None:\n    user_pw = \"password\"\nmechanism = config.get(\"mechanism\")\nif mechanism is None:\n    mechanism = \"scram-sha-256\"\ntest_user = redpanda.User(\"testUser\",\n    password=user_pw,\n    mechanism=mechanism,\n    cluster_api_url=test_cluster.cluster_api_url)\ntest_acl = redpanda.Acl(\"testAcl\",\n    resource_type=\"CLUSTER\",\n    resource_name_=\"kafka-cluster\",\n    resource_pattern_type=\"LITERAL\",\n    principal=test_user.name.apply(lambda name: f\"User:{name}\"),\n    host=\"*\",\n    operation=\"ALTER\",\n    permission_type=\"ALLOW\",\n    cluster_api_url=test_cluster.cluster_api_url)\nuser_name = config.get(\"userName\")\nif user_name is None:\n    user_name = \"data-test-username\"\ntopic_name = config.get(\"topicName\")\nif topic_name is None:\n    topic_name = \"data-test-topic\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var clusterId = config.Get(\"clusterId\") ?? \"\";\n    var testCluster = Redpanda.GetCluster.Invoke(new()\n    {\n        Id = clusterId,\n    });\n\n    var topicConfig = config.GetObject\u003cdynamic\u003e(\"topicConfig\") ?? \n    {\n        { \"cleanup.policy\", \"compact\" },\n        { \"flush.ms\", 100 },\n        { \"compression.type\", \"snappy\" },\n    };\n    var partitionCount = config.GetDouble(\"partitionCount\") ?? 3;\n    var replicationFactor = config.GetDouble(\"replicationFactor\") ?? 3;\n    var testTopic = new Redpanda.Topic(\"testTopic\", new()\n    {\n        PartitionCount = partitionCount,\n        ReplicationFactor = replicationFactor,\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n        AllowDeletion = true,\n        Configuration = topicConfig,\n    });\n\n    var userPw = config.Get(\"userPw\") ?? \"password\";\n    var mechanism = config.Get(\"mechanism\") ?? \"scram-sha-256\";\n    var testUser = new Redpanda.User(\"testUser\", new()\n    {\n        Password = userPw,\n        Mechanism = mechanism,\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n    });\n\n    var testAcl = new Redpanda.Acl(\"testAcl\", new()\n    {\n        ResourceType = \"CLUSTER\",\n        ResourceName = \"kafka-cluster\",\n        ResourcePatternType = \"LITERAL\",\n        Principal = testUser.Name.Apply(name =\u003e $\"User:{name}\"),\n        Host = \"*\",\n        Operation = \"ALTER\",\n        PermissionType = \"ALLOW\",\n        ClusterApiUrl = testCluster.Apply(getClusterResult =\u003e getClusterResult.ClusterApiUrl),\n    });\n\n    var userName = config.Get(\"userName\") ?? \"data-test-username\";\n    var topicName = config.Get(\"topicName\") ?? \"data-test-topic\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tclusterId := \"\"\n\t\tif param := cfg.Get(\"clusterId\"); param != \"\" {\n\t\t\tclusterId = param\n\t\t}\n\t\ttestCluster, err := redpanda.LookupCluster(ctx, \u0026redpanda.LookupClusterArgs{\n\t\t\tId: clusterId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttopicConfig := map[string]interface{}{\n\t\t\t\"cleanup.policy\":   \"compact\",\n\t\t\t\"flush.ms\":         100,\n\t\t\t\"compression.type\": \"snappy\",\n\t\t}\n\t\tif param := cfg.GetObject(\"topicConfig\"); param != nil {\n\t\t\ttopicConfig = param\n\t\t}\n\t\tpartitionCount := float64(3)\n\t\tif param := cfg.GetFloat64(\"partitionCount\"); param != 0 {\n\t\t\tpartitionCount = param\n\t\t}\n\t\treplicationFactor := float64(3)\n\t\tif param := cfg.GetFloat64(\"replicationFactor\"); param != 0 {\n\t\t\treplicationFactor = param\n\t\t}\n\t\t_, err = redpanda.NewTopic(ctx, \"testTopic\", \u0026redpanda.TopicArgs{\n\t\t\tPartitionCount:    pulumi.Float64(partitionCount),\n\t\t\tReplicationFactor: pulumi.Float64(replicationFactor),\n\t\t\tClusterApiUrl:     pulumi.String(testCluster.ClusterApiUrl),\n\t\t\tAllowDeletion:     pulumi.Bool(true),\n\t\t\tConfiguration:     pulumi.Any(topicConfig),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserPw := \"password\"\n\t\tif param := cfg.Get(\"userPw\"); param != \"\" {\n\t\t\tuserPw = param\n\t\t}\n\t\tmechanism := \"scram-sha-256\"\n\t\tif param := cfg.Get(\"mechanism\"); param != \"\" {\n\t\t\tmechanism = param\n\t\t}\n\t\ttestUser, err := redpanda.NewUser(ctx, \"testUser\", \u0026redpanda.UserArgs{\n\t\t\tPassword:      pulumi.String(userPw),\n\t\t\tMechanism:     pulumi.String(mechanism),\n\t\t\tClusterApiUrl: pulumi.String(testCluster.ClusterApiUrl),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = redpanda.NewAcl(ctx, \"testAcl\", \u0026redpanda.AclArgs{\n\t\t\tResourceType:        pulumi.String(\"CLUSTER\"),\n\t\t\tResourceName:        pulumi.String(\"kafka-cluster\"),\n\t\t\tResourcePatternType: pulumi.String(\"LITERAL\"),\n\t\t\tPrincipal: testUser.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"User:%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tHost:           pulumi.String(\"*\"),\n\t\t\tOperation:      pulumi.String(\"ALTER\"),\n\t\t\tPermissionType: pulumi.String(\"ALLOW\"),\n\t\t\tClusterApiUrl:  pulumi.String(testCluster.ClusterApiUrl),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserName := \"data-test-username\"\n\t\tif param := cfg.Get(\"userName\"); param != \"\" {\n\t\t\tuserName = param\n\t\t}\n\t\ttopicName := \"data-test-topic\"\n\t\tif param := cfg.Get(\"topicName\"); param != \"\" {\n\t\t\ttopicName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetClusterArgs;\nimport com.pulumi.redpanda.Topic;\nimport com.pulumi.redpanda.TopicArgs;\nimport com.pulumi.redpanda.User;\nimport com.pulumi.redpanda.UserArgs;\nimport com.pulumi.redpanda.Acl;\nimport com.pulumi.redpanda.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var clusterId = config.get(\"clusterId\").orElse(\"\");\n        final var testCluster = RedpandaFunctions.getCluster(GetClusterArgs.builder()\n            .id(clusterId)\n            .build());\n\n        final var topicConfig = config.get(\"topicConfig\").orElse(Map.ofEntries(\n            Map.entry(\"cleanup.policy\", \"compact\"),\n            Map.entry(\"flush.ms\", 100),\n            Map.entry(\"compression.type\", \"snappy\")\n        ));\n        final var partitionCount = config.get(\"partitionCount\").orElse(3);\n        final var replicationFactor = config.get(\"replicationFactor\").orElse(3);\n        var testTopic = new Topic(\"testTopic\", TopicArgs.builder()\n            .partitionCount(partitionCount)\n            .replicationFactor(replicationFactor)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .allowDeletion(true)\n            .configuration(topicConfig)\n            .build());\n\n        final var userPw = config.get(\"userPw\").orElse(\"password\");\n        final var mechanism = config.get(\"mechanism\").orElse(\"scram-sha-256\");\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .password(userPw)\n            .mechanism(mechanism)\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        var testAcl = new Acl(\"testAcl\", AclArgs.builder()\n            .resourceType(\"CLUSTER\")\n            .resourceName(\"kafka-cluster\")\n            .resourcePatternType(\"LITERAL\")\n            .principal(testUser.name().applyValue(_name -\u003e String.format(\"User:%s\", _name)))\n            .host(\"*\")\n            .operation(\"ALTER\")\n            .permissionType(\"ALLOW\")\n            .clusterApiUrl(testCluster.clusterApiUrl())\n            .build());\n\n        final var userName = config.get(\"userName\").orElse(\"data-test-username\");\n        final var topicName = config.get(\"topicName\").orElse(\"data-test-topic\");\n    }\n}\n```\n```yaml\nconfiguration:\n  clusterId:\n    type: string\n    default: \"\"\n  topicConfig:\n    type: dynamic\n    default:\n      cleanup.policy: compact\n      flush.ms: 100\n      compression.type: snappy\n  userName:\n    type: string\n    default: data-test-username\n  userPw:\n    type: string\n    default: password\n  mechanism:\n    type: string\n    default: scram-sha-256\n  topicName:\n    type: string\n    default: data-test-topic\n  partitionCount:\n    type: number\n    default: 3\n  replicationFactor:\n    type: number\n    default: 3\nresources:\n  testTopic:\n    type: redpanda:Topic\n    properties:\n      partitionCount: ${partitionCount}\n      replicationFactor: ${replicationFactor}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n      allowDeletion: true\n      configuration: ${topicConfig}\n  testUser:\n    type: redpanda:User\n    properties:\n      password: ${userPw}\n      mechanism: ${mechanism}\n      clusterApiUrl: ${testCluster.clusterApiUrl}\n  testAcl:\n    type: redpanda:Acl\n    properties:\n      resourceType: CLUSTER\n      resourceName: kafka-cluster\n      resourcePatternType: LITERAL\n      principal: User:${testUser.name}\n      host: '*'\n      operation: ALTER\n      permissionType: ALLOW\n      clusterApiUrl: ${testCluster.clusterApiUrl}\nvariables:\n  testCluster:\n    fn::invoke:\n      function: redpanda:getCluster\n      arguments:\n        id: ${clusterId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Limitations\n\nCan only be used with Redpanda Cloud Dedicated and BYOC clusters.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "allowDeletion": {
                        "type": "boolean",
                        "description": "Whether cluster deletion is allowed.\n"
                    },
                    "awsPrivateLink": {
                        "$ref": "#/types/redpanda:index/getClusterAwsPrivateLink:getClusterAwsPrivateLink",
                        "description": "AWS PrivateLink configuration.\n"
                    },
                    "azurePrivateLink": {
                        "$ref": "#/types/redpanda:index/getClusterAzurePrivateLink:getClusterAzurePrivateLink",
                        "description": "Azure Private Link configuration.\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where resources are created.\n"
                    },
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The URL of the cluster API.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type. Type is immutable and can only be set on cluster creation.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when the cluster was created.\n"
                    },
                    "customerManagedResources": {
                        "$ref": "#/types/redpanda:index/getClusterCustomerManagedResources:getClusterCustomerManagedResources",
                        "description": "Customer managed resources configuration for the cluster.\n"
                    },
                    "gcpGlobalAccessEnabled": {
                        "type": "boolean",
                        "description": "If true, GCP global access is enabled.\n"
                    },
                    "gcpPrivateServiceConnect": {
                        "$ref": "#/types/redpanda:index/getClusterGcpPrivateServiceConnect:getClusterGcpPrivateServiceConnect",
                        "description": "GCP Private Service Connect configuration.\n"
                    },
                    "httpProxy": {
                        "$ref": "#/types/redpanda:index/getClusterHttpProxy:getClusterHttpProxy",
                        "description": "HTTP Proxy properties.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.\n"
                    },
                    "kafkaApi": {
                        "$ref": "#/types/redpanda:index/getClusterKafkaApi:getClusterKafkaApi",
                        "description": "Cluster's Kafka API properties.\n"
                    },
                    "kafkaConnect": {
                        "$ref": "#/types/redpanda:index/getClusterKafkaConnect:getClusterKafkaConnect",
                        "description": "Kafka Connect configuration.\n"
                    },
                    "maintenanceWindowConfig": {
                        "$ref": "#/types/redpanda:index/getClusterMaintenanceWindowConfig:getClusterMaintenanceWindowConfig",
                        "description": "Maintenance window configuration for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name of the cluster.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "Network ID where cluster is placed.\n"
                    },
                    "prometheus": {
                        "$ref": "#/types/redpanda:index/getClusterPrometheus:getClusterPrometheus",
                        "description": "Prometheus metrics endpoint properties.\n"
                    },
                    "readReplicaClusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of clusters that can create read-only topics from this cluster.\n"
                    },
                    "redpandaConsole": {
                        "$ref": "#/types/redpanda:index/getClusterRedpandaConsole:getClusterRedpandaConsole",
                        "description": "Redpanda Console properties.\n"
                    },
                    "redpandaVersion": {
                        "type": "string",
                        "description": "Current Redpanda version of the cluster.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cloud provider region.\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "Resource group ID of the cluster.\n"
                    },
                    "schemaRegistry": {
                        "$ref": "#/types/redpanda:index/getClusterSchemaRegistry:getClusterSchemaRegistry",
                        "description": "Schema Registry properties.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Current state of the cluster.\n"
                    },
                    "stateDescription": {
                        "$ref": "#/types/redpanda:index/getClusterStateDescription:getClusterStateDescription",
                        "description": "Detailed state description when cluster is in a non-ready state.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags placed on cloud resources.\n"
                    },
                    "throughputTier": {
                        "type": "string",
                        "description": "Throughput tier of the cluster.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowDeletion",
                    "awsPrivateLink",
                    "azurePrivateLink",
                    "cloudProvider",
                    "clusterApiUrl",
                    "clusterType",
                    "connectionType",
                    "createdAt",
                    "customerManagedResources",
                    "gcpGlobalAccessEnabled",
                    "gcpPrivateServiceConnect",
                    "httpProxy",
                    "id",
                    "kafkaApi",
                    "kafkaConnect",
                    "maintenanceWindowConfig",
                    "name",
                    "networkId",
                    "prometheus",
                    "readReplicaClusterIds",
                    "redpandaConsole",
                    "redpandaVersion",
                    "region",
                    "resourceGroupId",
                    "schemaRegistry",
                    "state",
                    "stateDescription",
                    "tags",
                    "throughputTier",
                    "zones"
                ]
            }
        },
        "redpanda:index/getNetwork:getNetwork": {
            "description": "Data source for a Redpanda Cloud network\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst example = redpanda.getNetwork({\n    id: \"network_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\n\nexample = redpanda.get_network(id=\"network_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Redpanda.GetNetwork.Invoke(new()\n    {\n        Id = \"network_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redpanda.LookupNetwork(ctx, \u0026redpanda.LookupNetworkArgs{\n\t\t\tId: \"network_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RedpandaFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(\"network_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: redpanda:getNetwork\n      arguments:\n        id: network_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the network\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "description": "The cidr_block to create the network in\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider to create the network in. Can also be set at the provider level\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "The type of cluster this network is associated with, can be one of dedicated or cloud\n"
                    },
                    "customerManagedResources": {
                        "$ref": "#/types/redpanda:index/getNetworkCustomerManagedResources:getNetworkCustomerManagedResources"
                    },
                    "id": {
                        "type": "string",
                        "description": "UUID of the network\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to create the network in. Can also be set at the provider level\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "The ID of the resource group in which to create the network\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidrBlock",
                    "cloudProvider",
                    "clusterType",
                    "customerManagedResources",
                    "id",
                    "name",
                    "region",
                    "resourceGroupId"
                ]
            }
        },
        "redpanda:index/getRegion:getRegion": {
            "description": "Data source for a Redpanda Cloud region\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the region exists\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the region\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the region exists\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the region\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Zones available in the region\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "name",
                    "zones",
                    "id"
                ]
            }
        },
        "redpanda:index/getRegions:getRegions": {
            "description": "Data source for a list of Redpanda Cloud regions\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the regions exist\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the regions exist\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redpanda:index/getRegionsRegion:getRegionsRegion"
                        },
                        "description": "Regions available for the cloud provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "regions",
                    "id"
                ]
            }
        },
        "redpanda:index/getResourceGroup:getResourceGroup": {
            "description": "Data source for a Redpanda Cloud resource group\n\n## Usage\n\n### Search by ID\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst example = redpanda.getResourceGroup({\n    id: \"resource_group_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\n\nexample = redpanda.get_resource_group(id=\"resource_group_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Redpanda.GetResourceGroup.Invoke(new()\n    {\n        Id = \"resource_group_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redpanda.LookupResourceGroup(ctx, \u0026redpanda.LookupResourceGroupArgs{\n\t\t\tId: pulumi.StringRef(\"resource_group_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetResourceGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RedpandaFunctions.getResourceGroup(GetResourceGroupArgs.builder()\n            .id(\"resource_group_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: redpanda:getResourceGroup\n      arguments:\n        id: resource_group_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Search by name\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst example = redpanda.getResourceGroup({\n    name: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\n\nexample = redpanda.get_resource_group(name=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Redpanda.GetResourceGroup.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redpanda.LookupResourceGroup(ctx, \u0026redpanda.LookupResourceGroupArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetResourceGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RedpandaFunctions.getResourceGroup(GetResourceGroupArgs.builder()\n            .name(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: redpanda:getResourceGroup\n      arguments:\n        name: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the resource group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourceGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of the resource group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource group\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "redpanda:index/getServerlessCluster:getServerlessCluster": {
            "description": "Data source for a Redpanda Cloud serverless cluster\n\n\n## Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst example = redpanda.getServerlessCluster({\n    id: \"serverless_cluster_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_redpanda as redpanda\n\nexample = redpanda.get_serverless_cluster(id=\"serverless_cluster_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumi.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Redpanda.GetServerlessCluster.Invoke(new()\n    {\n        Id = \"serverless_cluster_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := redpanda.LookupServerlessCluster(ctx, \u0026redpanda.LookupServerlessClusterArgs{\n\t\t\tId: \"serverless_cluster_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.RedpandaFunctions;\nimport com.pulumi.redpanda.inputs.GetServerlessClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RedpandaFunctions.getServerlessCluster(GetServerlessClusterArgs.builder()\n            .id(\"serverless_cluster_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: redpanda:getServerlessCluster\n      arguments:\n        id: serverless_cluster_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example Usage to create a serverless cluster\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as redpanda from \"@pulumiverse/redpanda\";\n\nconst testResourceGroup = new redpanda.ResourceGroup(\"testResourceGroup\", {});\nconst config = new pulumi.Config();\nconst region = config.get(\"region\") || \"eu-west-1\";\nconst testServerlessCluster = new redpanda.ServerlessCluster(\"testServerlessCluster\", {\n    resourceGroupId: testResourceGroup.id,\n    serverlessRegion: region,\n});\nconst resourceGroupName = config.get(\"resourceGroupName\") || \"testgroup\";\nconst clusterName = config.get(\"clusterName\") || \"testname\";\n```\n```python\nimport pulumi\nimport pulumiverse_redpanda as redpanda\n\ntest_resource_group = redpanda.ResourceGroup(\"testResourceGroup\")\nconfig = pulumi.Config()\nregion = config.get(\"region\")\nif region is None:\n    region = \"eu-west-1\"\ntest_serverless_cluster = redpanda.ServerlessCluster(\"testServerlessCluster\",\n    resource_group_id=test_resource_group.id,\n    serverless_region=region)\nresource_group_name = config.get(\"resourceGroupName\")\nif resource_group_name is None:\n    resource_group_name = \"testgroup\"\ncluster_name = config.get(\"clusterName\")\nif cluster_name is None:\n    cluster_name = \"testname\"\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Redpanda = Pulumiverse.Redpanda;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testResourceGroup = new Redpanda.ResourceGroup(\"testResourceGroup\");\n\n    var config = new Config();\n    var region = config.Get(\"region\") ?? \"eu-west-1\";\n    var testServerlessCluster = new Redpanda.ServerlessCluster(\"testServerlessCluster\", new()\n    {\n        ResourceGroupId = testResourceGroup.Id,\n        ServerlessRegion = region,\n    });\n\n    var resourceGroupName = config.Get(\"resourceGroupName\") ?? \"testgroup\";\n    var clusterName = config.Get(\"clusterName\") ?? \"testname\";\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-redpanda/sdk/go/redpanda\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestResourceGroup, err := redpanda.NewResourceGroup(ctx, \"testResourceGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tregion := \"eu-west-1\"\n\t\tif param := cfg.Get(\"region\"); param != \"\" {\n\t\t\tregion = param\n\t\t}\n\t\t_, err = redpanda.NewServerlessCluster(ctx, \"testServerlessCluster\", \u0026redpanda.ServerlessClusterArgs{\n\t\t\tResourceGroupId:  testResourceGroup.ID(),\n\t\t\tServerlessRegion: pulumi.String(region),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresourceGroupName := \"testgroup\"\n\t\tif param := cfg.Get(\"resourceGroupName\"); param != \"\" {\n\t\t\tresourceGroupName = param\n\t\t}\n\t\tclusterName := \"testname\"\n\t\tif param := cfg.Get(\"clusterName\"); param != \"\" {\n\t\t\tclusterName = param\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.redpanda.ResourceGroup;\nimport com.pulumi.redpanda.ServerlessCluster;\nimport com.pulumi.redpanda.ServerlessClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        var testResourceGroup = new ResourceGroup(\"testResourceGroup\");\n\n        final var region = config.get(\"region\").orElse(\"eu-west-1\");\n        var testServerlessCluster = new ServerlessCluster(\"testServerlessCluster\", ServerlessClusterArgs.builder()\n            .resourceGroupId(testResourceGroup.id())\n            .serverlessRegion(region)\n            .build());\n\n        final var resourceGroupName = config.get(\"resourceGroupName\").orElse(\"testgroup\");\n        final var clusterName = config.get(\"clusterName\").orElse(\"testname\");\n    }\n}\n```\n```yaml\nconfiguration:\n  resourceGroupName:\n    type: string\n    default: testgroup\n  clusterName:\n    type: string\n    default: testname\n  region:\n    type: string\n    default: eu-west-1\nresources:\n  testResourceGroup:\n    type: redpanda:ResourceGroup\n  testServerlessCluster:\n    type: redpanda:ServerlessCluster\n    properties:\n      resourceGroupId: ${testResourceGroup.id}\n      serverlessRegion: ${region}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Limitations\n\nCan only be used with Redpanda Cloud serverless clusters.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerlessCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the serverless cluster\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerlessCluster.\n",
                "properties": {
                    "clusterApiUrl": {
                        "type": "string",
                        "description": "The URL of the cluster API\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the serverless cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the serverless cluster\n"
                    },
                    "resourceGroupId": {
                        "type": "string",
                        "description": "The ID of the resource group in which to create the serverless cluster\n"
                    },
                    "serverlessRegion": {
                        "type": "string",
                        "description": "Redpanda specific region for the serverless cluster\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterApiUrl",
                    "id",
                    "name",
                    "resourceGroupId",
                    "serverlessRegion"
                ]
            }
        },
        "redpanda:index/getServerlessRegions:getServerlessRegions": {
            "description": "Data source for a list of Redpanda Cloud serverless regions\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerlessRegions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the serverless regions exist\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerlessRegions.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the serverless regions exist\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "serverlessRegions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redpanda:index/getServerlessRegionsServerlessRegion:getServerlessRegionsServerlessRegion"
                        },
                        "description": "Serverless regions available for the cloud provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "serverlessRegions",
                    "id"
                ]
            }
        },
        "redpanda:index/getThroughputTiers:getThroughputTiers": {
            "description": "Data source for a list of Redpanda Cloud throughput tiers\n",
            "inputs": {
                "description": "A collection of arguments for invoking getThroughputTiers.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the Throughput Tiers are available\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getThroughputTiers.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider where the Throughput Tiers are available\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "throughputTiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/redpanda:index/getThroughputTiersThroughputTier:getThroughputTiersThroughputTier"
                        },
                        "description": "Throughput Tiers\n"
                    }
                },
                "type": "object",
                "required": [
                    "throughputTiers",
                    "id"
                ]
            }
        }
    }
}